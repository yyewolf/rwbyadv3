// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Auction is an object representing the database table.
type Auction struct {
	ID             string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	PlayerID       string    `boil:"player_id" json:"player_id" toml:"player_id" yaml:"player_id"`
	CardID         string    `boil:"card_id" json:"card_id" toml:"card_id" yaml:"card_id"`
	TimeExtensions int       `boil:"time_extensions" json:"time_extensions" toml:"time_extensions" yaml:"time_extensions"`
	EndsAt         time.Time `boil:"ends_at" json:"ends_at" toml:"ends_at" yaml:"ends_at"`
	CreatedAt      time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	DeletedAt      null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *auctionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L auctionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AuctionColumns = struct {
	ID             string
	PlayerID       string
	CardID         string
	TimeExtensions string
	EndsAt         string
	CreatedAt      string
	DeletedAt      string
}{
	ID:             "id",
	PlayerID:       "player_id",
	CardID:         "card_id",
	TimeExtensions: "time_extensions",
	EndsAt:         "ends_at",
	CreatedAt:      "created_at",
	DeletedAt:      "deleted_at",
}

var AuctionTableColumns = struct {
	ID             string
	PlayerID       string
	CardID         string
	TimeExtensions string
	EndsAt         string
	CreatedAt      string
	DeletedAt      string
}{
	ID:             "auctions.id",
	PlayerID:       "auctions.player_id",
	CardID:         "auctions.card_id",
	TimeExtensions: "auctions.time_extensions",
	EndsAt:         "auctions.ends_at",
	CreatedAt:      "auctions.created_at",
	DeletedAt:      "auctions.deleted_at",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod   { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod  { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) ILIKE(x string) qm.QueryMod  { return qm.Where(w.field+" ILIKE ?", x) }
func (w whereHelperstring) NILIKE(x string) qm.QueryMod { return qm.Where(w.field+" NOT ILIKE ?", x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var AuctionWhere = struct {
	ID             whereHelperstring
	PlayerID       whereHelperstring
	CardID         whereHelperstring
	TimeExtensions whereHelperint
	EndsAt         whereHelpertime_Time
	CreatedAt      whereHelpertime_Time
	DeletedAt      whereHelpernull_Time
}{
	ID:             whereHelperstring{field: "\"auctions\".\"id\""},
	PlayerID:       whereHelperstring{field: "\"auctions\".\"player_id\""},
	CardID:         whereHelperstring{field: "\"auctions\".\"card_id\""},
	TimeExtensions: whereHelperint{field: "\"auctions\".\"time_extensions\""},
	EndsAt:         whereHelpertime_Time{field: "\"auctions\".\"ends_at\""},
	CreatedAt:      whereHelpertime_Time{field: "\"auctions\".\"created_at\""},
	DeletedAt:      whereHelpernull_Time{field: "\"auctions\".\"deleted_at\""},
}

// AuctionRels is where relationship names are stored.
var AuctionRels = struct {
	Card         string
	Player       string
	AuctionsBids string
}{
	Card:         "Card",
	Player:       "Player",
	AuctionsBids: "AuctionsBids",
}

// auctionR is where relationships are stored.
type auctionR struct {
	Card         *Card            `boil:"Card" json:"Card" toml:"Card" yaml:"Card"`
	Player       *Player          `boil:"Player" json:"Player" toml:"Player" yaml:"Player"`
	AuctionsBids AuctionsBidSlice `boil:"AuctionsBids" json:"AuctionsBids" toml:"AuctionsBids" yaml:"AuctionsBids"`
}

// NewStruct creates a new relationship struct
func (*auctionR) NewStruct() *auctionR {
	return &auctionR{}
}

func (r *auctionR) GetCard() *Card {
	if r == nil {
		return nil
	}
	return r.Card
}

func (r *auctionR) GetPlayer() *Player {
	if r == nil {
		return nil
	}
	return r.Player
}

func (r *auctionR) GetAuctionsBids() AuctionsBidSlice {
	if r == nil {
		return nil
	}
	return r.AuctionsBids
}

// auctionL is where Load methods for each relationship are stored.
type auctionL struct{}

var (
	auctionAllColumns            = []string{"id", "player_id", "card_id", "time_extensions", "ends_at", "created_at", "deleted_at"}
	auctionColumnsWithoutDefault = []string{"id", "player_id", "card_id", "ends_at"}
	auctionColumnsWithDefault    = []string{"time_extensions", "created_at", "deleted_at"}
	auctionPrimaryKeyColumns     = []string{"id"}
	auctionGeneratedColumns      = []string{}
)

type (
	// AuctionSlice is an alias for a slice of pointers to Auction.
	// This should almost always be used instead of []Auction.
	AuctionSlice []*Auction
	// AuctionHook is the signature for custom Auction hook methods
	AuctionHook func(context.Context, boil.ContextExecutor, *Auction) error

	auctionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	auctionType                 = reflect.TypeOf(&Auction{})
	auctionMapping              = queries.MakeStructMapping(auctionType)
	auctionPrimaryKeyMapping, _ = queries.BindMapping(auctionType, auctionMapping, auctionPrimaryKeyColumns)
	auctionInsertCacheMut       sync.RWMutex
	auctionInsertCache          = make(map[string]insertCache)
	auctionUpdateCacheMut       sync.RWMutex
	auctionUpdateCache          = make(map[string]updateCache)
	auctionUpsertCacheMut       sync.RWMutex
	auctionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var auctionAfterSelectMu sync.Mutex
var auctionAfterSelectHooks []AuctionHook

var auctionBeforeInsertMu sync.Mutex
var auctionBeforeInsertHooks []AuctionHook
var auctionAfterInsertMu sync.Mutex
var auctionAfterInsertHooks []AuctionHook

var auctionBeforeUpdateMu sync.Mutex
var auctionBeforeUpdateHooks []AuctionHook
var auctionAfterUpdateMu sync.Mutex
var auctionAfterUpdateHooks []AuctionHook

var auctionBeforeDeleteMu sync.Mutex
var auctionBeforeDeleteHooks []AuctionHook
var auctionAfterDeleteMu sync.Mutex
var auctionAfterDeleteHooks []AuctionHook

var auctionBeforeUpsertMu sync.Mutex
var auctionBeforeUpsertHooks []AuctionHook
var auctionAfterUpsertMu sync.Mutex
var auctionAfterUpsertHooks []AuctionHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Auction) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range auctionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Auction) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range auctionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Auction) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range auctionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Auction) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range auctionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Auction) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range auctionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Auction) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range auctionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Auction) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range auctionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Auction) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range auctionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Auction) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range auctionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAuctionHook registers your hook function for all future operations.
func AddAuctionHook(hookPoint boil.HookPoint, auctionHook AuctionHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		auctionAfterSelectMu.Lock()
		auctionAfterSelectHooks = append(auctionAfterSelectHooks, auctionHook)
		auctionAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		auctionBeforeInsertMu.Lock()
		auctionBeforeInsertHooks = append(auctionBeforeInsertHooks, auctionHook)
		auctionBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		auctionAfterInsertMu.Lock()
		auctionAfterInsertHooks = append(auctionAfterInsertHooks, auctionHook)
		auctionAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		auctionBeforeUpdateMu.Lock()
		auctionBeforeUpdateHooks = append(auctionBeforeUpdateHooks, auctionHook)
		auctionBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		auctionAfterUpdateMu.Lock()
		auctionAfterUpdateHooks = append(auctionAfterUpdateHooks, auctionHook)
		auctionAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		auctionBeforeDeleteMu.Lock()
		auctionBeforeDeleteHooks = append(auctionBeforeDeleteHooks, auctionHook)
		auctionBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		auctionAfterDeleteMu.Lock()
		auctionAfterDeleteHooks = append(auctionAfterDeleteHooks, auctionHook)
		auctionAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		auctionBeforeUpsertMu.Lock()
		auctionBeforeUpsertHooks = append(auctionBeforeUpsertHooks, auctionHook)
		auctionBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		auctionAfterUpsertMu.Lock()
		auctionAfterUpsertHooks = append(auctionAfterUpsertHooks, auctionHook)
		auctionAfterUpsertMu.Unlock()
	}
}

// OneG returns a single auction record from the query using the global executor.
func (q auctionQuery) OneG(ctx context.Context) (*Auction, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single auction record from the query.
func (q auctionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Auction, error) {
	o := &Auction{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for auctions")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Auction records from the query using the global executor.
func (q auctionQuery) AllG(ctx context.Context) (AuctionSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Auction records from the query.
func (q auctionQuery) All(ctx context.Context, exec boil.ContextExecutor) (AuctionSlice, error) {
	var o []*Auction

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Auction slice")
	}

	if len(auctionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Auction records in the query using the global executor
func (q auctionQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Auction records in the query.
func (q auctionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count auctions rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q auctionQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q auctionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if auctions exists")
	}

	return count > 0, nil
}

// Card pointed to by the foreign key.
func (o *Auction) Card(mods ...qm.QueryMod) cardQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CardID),
	}

	queryMods = append(queryMods, mods...)

	return Cards(queryMods...)
}

// Player pointed to by the foreign key.
func (o *Auction) Player(mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PlayerID),
	}

	queryMods = append(queryMods, mods...)

	return Players(queryMods...)
}

// AuctionsBids retrieves all the auctions_bid's AuctionsBids with an executor.
func (o *Auction) AuctionsBids(mods ...qm.QueryMod) auctionsBidQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"auctions_bids\".\"auction_id\"=?", o.ID),
	)

	return AuctionsBids(queryMods...)
}

// LoadCard allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (auctionL) LoadCard(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAuction interface{}, mods queries.Applicator) error {
	var slice []*Auction
	var object *Auction

	if singular {
		var ok bool
		object, ok = maybeAuction.(*Auction)
		if !ok {
			object = new(Auction)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAuction)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAuction))
			}
		}
	} else {
		s, ok := maybeAuction.(*[]*Auction)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAuction)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAuction))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &auctionR{}
		}
		args[object.CardID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &auctionR{}
			}

			args[obj.CardID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`cards`),
		qm.WhereIn(`cards.id in ?`, argsSlice...),
		qmhelper.WhereIsNull(`cards.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Card")
	}

	var resultSlice []*Card
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Card")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for cards")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for cards")
	}

	if len(cardAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Card = foreign
		if foreign.R == nil {
			foreign.R = &cardR{}
		}
		foreign.R.Auctions = append(foreign.R.Auctions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CardID == foreign.ID {
				local.R.Card = foreign
				if foreign.R == nil {
					foreign.R = &cardR{}
				}
				foreign.R.Auctions = append(foreign.R.Auctions, local)
				break
			}
		}
	}

	return nil
}

// LoadPlayer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (auctionL) LoadPlayer(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAuction interface{}, mods queries.Applicator) error {
	var slice []*Auction
	var object *Auction

	if singular {
		var ok bool
		object, ok = maybeAuction.(*Auction)
		if !ok {
			object = new(Auction)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAuction)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAuction))
			}
		}
	} else {
		s, ok := maybeAuction.(*[]*Auction)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAuction)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAuction))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &auctionR{}
		}
		args[object.PlayerID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &auctionR{}
			}

			args[obj.PlayerID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`players`),
		qm.WhereIn(`players.id in ?`, argsSlice...),
		qmhelper.WhereIsNull(`players.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players")
	}

	if len(playerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Player = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.Auctions = append(foreign.R.Auctions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PlayerID == foreign.ID {
				local.R.Player = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.Auctions = append(foreign.R.Auctions, local)
				break
			}
		}
	}

	return nil
}

// LoadAuctionsBids allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (auctionL) LoadAuctionsBids(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAuction interface{}, mods queries.Applicator) error {
	var slice []*Auction
	var object *Auction

	if singular {
		var ok bool
		object, ok = maybeAuction.(*Auction)
		if !ok {
			object = new(Auction)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAuction)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAuction))
			}
		}
	} else {
		s, ok := maybeAuction.(*[]*Auction)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAuction)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAuction))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &auctionR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &auctionR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`auctions_bids`),
		qm.WhereIn(`auctions_bids.auction_id in ?`, argsSlice...),
		qmhelper.WhereIsNull(`auctions_bids.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load auctions_bids")
	}

	var resultSlice []*AuctionsBid
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice auctions_bids")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on auctions_bids")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for auctions_bids")
	}

	if len(auctionsBidAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AuctionsBids = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &auctionsBidR{}
			}
			foreign.R.Auction = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.AuctionID {
				local.R.AuctionsBids = append(local.R.AuctionsBids, foreign)
				if foreign.R == nil {
					foreign.R = &auctionsBidR{}
				}
				foreign.R.Auction = local
				break
			}
		}
	}

	return nil
}

// SetCardG of the auction to the related item.
// Sets o.R.Card to related.
// Adds o to related.R.Auctions.
// Uses the global database handle.
func (o *Auction) SetCardG(ctx context.Context, insert bool, related *Card) error {
	return o.SetCard(ctx, boil.GetContextDB(), insert, related)
}

// SetCard of the auction to the related item.
// Sets o.R.Card to related.
// Adds o to related.R.Auctions.
func (o *Auction) SetCard(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Card) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"auctions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"card_id"}),
		strmangle.WhereClause("\"", "\"", 2, auctionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CardID = related.ID
	if o.R == nil {
		o.R = &auctionR{
			Card: related,
		}
	} else {
		o.R.Card = related
	}

	if related.R == nil {
		related.R = &cardR{
			Auctions: AuctionSlice{o},
		}
	} else {
		related.R.Auctions = append(related.R.Auctions, o)
	}

	return nil
}

// SetPlayerG of the auction to the related item.
// Sets o.R.Player to related.
// Adds o to related.R.Auctions.
// Uses the global database handle.
func (o *Auction) SetPlayerG(ctx context.Context, insert bool, related *Player) error {
	return o.SetPlayer(ctx, boil.GetContextDB(), insert, related)
}

// SetPlayer of the auction to the related item.
// Sets o.R.Player to related.
// Adds o to related.R.Auctions.
func (o *Auction) SetPlayer(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"auctions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"player_id"}),
		strmangle.WhereClause("\"", "\"", 2, auctionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PlayerID = related.ID
	if o.R == nil {
		o.R = &auctionR{
			Player: related,
		}
	} else {
		o.R.Player = related
	}

	if related.R == nil {
		related.R = &playerR{
			Auctions: AuctionSlice{o},
		}
	} else {
		related.R.Auctions = append(related.R.Auctions, o)
	}

	return nil
}

// AddAuctionsBidsG adds the given related objects to the existing relationships
// of the auction, optionally inserting them as new records.
// Appends related to o.R.AuctionsBids.
// Sets related.R.Auction appropriately.
// Uses the global database handle.
func (o *Auction) AddAuctionsBidsG(ctx context.Context, insert bool, related ...*AuctionsBid) error {
	return o.AddAuctionsBids(ctx, boil.GetContextDB(), insert, related...)
}

// AddAuctionsBids adds the given related objects to the existing relationships
// of the auction, optionally inserting them as new records.
// Appends related to o.R.AuctionsBids.
// Sets related.R.Auction appropriately.
func (o *Auction) AddAuctionsBids(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AuctionsBid) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.AuctionID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"auctions_bids\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"auction_id"}),
				strmangle.WhereClause("\"", "\"", 2, auctionsBidPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.AuctionID = o.ID
		}
	}

	if o.R == nil {
		o.R = &auctionR{
			AuctionsBids: related,
		}
	} else {
		o.R.AuctionsBids = append(o.R.AuctionsBids, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &auctionsBidR{
				Auction: o,
			}
		} else {
			rel.R.Auction = o
		}
	}
	return nil
}

// Auctions retrieves all the records using an executor.
func Auctions(mods ...qm.QueryMod) auctionQuery {
	mods = append(mods, qm.From("\"auctions\""), qmhelper.WhereIsNull("\"auctions\".\"deleted_at\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"auctions\".*"})
	}

	return auctionQuery{q}
}

// FindAuctionG retrieves a single record by ID.
func FindAuctionG(ctx context.Context, iD string, selectCols ...string) (*Auction, error) {
	return FindAuction(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindAuction retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAuction(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Auction, error) {
	auctionObj := &Auction{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"auctions\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, auctionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from auctions")
	}

	if err = auctionObj.doAfterSelectHooks(ctx, exec); err != nil {
		return auctionObj, err
	}

	return auctionObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Auction) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Auction) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no auctions provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(auctionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	auctionInsertCacheMut.RLock()
	cache, cached := auctionInsertCache[key]
	auctionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			auctionAllColumns,
			auctionColumnsWithDefault,
			auctionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(auctionType, auctionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(auctionType, auctionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"auctions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"auctions\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into auctions")
	}

	if !cached {
		auctionInsertCacheMut.Lock()
		auctionInsertCache[key] = cache
		auctionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Auction record using the global executor.
// See Update for more documentation.
func (o *Auction) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Auction.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Auction) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	auctionUpdateCacheMut.RLock()
	cache, cached := auctionUpdateCache[key]
	auctionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			auctionAllColumns,
			auctionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update auctions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"auctions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, auctionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(auctionType, auctionMapping, append(wl, auctionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update auctions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for auctions")
	}

	if !cached {
		auctionUpdateCacheMut.Lock()
		auctionUpdateCache[key] = cache
		auctionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q auctionQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q auctionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for auctions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for auctions")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o AuctionSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AuctionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), auctionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"auctions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, auctionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in auction slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all auction")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Auction) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Auction) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no auctions provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(auctionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	auctionUpsertCacheMut.RLock()
	cache, cached := auctionUpsertCache[key]
	auctionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			auctionAllColumns,
			auctionColumnsWithDefault,
			auctionColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			auctionAllColumns,
			auctionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert auctions, could not build update column list")
		}

		ret := strmangle.SetComplement(auctionAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(auctionPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert auctions, could not build conflict column list")
			}

			conflict = make([]string, len(auctionPrimaryKeyColumns))
			copy(conflict, auctionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"auctions\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(auctionType, auctionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(auctionType, auctionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert auctions")
	}

	if !cached {
		auctionUpsertCacheMut.Lock()
		auctionUpsertCache[key] = cache
		auctionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Auction record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Auction) DeleteG(ctx context.Context, hardDelete bool) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB(), hardDelete)
}

// Delete deletes a single Auction record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Auction) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Auction provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), auctionPrimaryKeyMapping)
		sql = "DELETE FROM \"auctions\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"auctions\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(auctionType, auctionMapping, append(wl, auctionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from auctions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for auctions")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q auctionQuery) DeleteAllG(ctx context.Context, hardDelete bool) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB(), hardDelete)
}

// DeleteAll deletes all matching rows.
func (q auctionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no auctionQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from auctions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for auctions")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o AuctionSlice) DeleteAllG(ctx context.Context, hardDelete bool) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB(), hardDelete)
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AuctionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(auctionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), auctionPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"auctions\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, auctionPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), auctionPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"auctions\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, auctionPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from auction slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for auctions")
	}

	if len(auctionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Auction) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no Auction provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Auction) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAuction(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AuctionSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty AuctionSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AuctionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AuctionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), auctionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"auctions\".* FROM \"auctions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, auctionPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AuctionSlice")
	}

	*o = slice

	return nil
}

// AuctionExistsG checks if the Auction row exists.
func AuctionExistsG(ctx context.Context, iD string) (bool, error) {
	return AuctionExists(ctx, boil.GetContextDB(), iD)
}

// AuctionExists checks if the Auction row exists.
func AuctionExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"auctions\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if auctions exists")
	}

	return exists, nil
}

// Exists checks if the Auction row exists.
func (o *Auction) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return AuctionExists(ctx, exec, o.ID)
}
