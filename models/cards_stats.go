// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CardsStat is an object representing the database table.
type CardsStat struct {
	CardID    string    `boil:"card_id" json:"card_id" toml:"card_id" yaml:"card_id"`
	Health    int       `boil:"health" json:"health" toml:"health" yaml:"health"`
	Armor     int       `boil:"armor" json:"armor" toml:"armor" yaml:"armor"`
	Damage    int       `boil:"damage" json:"damage" toml:"damage" yaml:"damage"`
	Healing   int       `boil:"healing" json:"healing" toml:"healing" yaml:"healing"`
	Speed     int       `boil:"speed" json:"speed" toml:"speed" yaml:"speed"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *cardsStatR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L cardsStatL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CardsStatColumns = struct {
	CardID    string
	Health    string
	Armor     string
	Damage    string
	Healing   string
	Speed     string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
}{
	CardID:    "card_id",
	Health:    "health",
	Armor:     "armor",
	Damage:    "damage",
	Healing:   "healing",
	Speed:     "speed",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	DeletedAt: "deleted_at",
}

var CardsStatTableColumns = struct {
	CardID    string
	Health    string
	Armor     string
	Damage    string
	Healing   string
	Speed     string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
}{
	CardID:    "cards_stats.card_id",
	Health:    "cards_stats.health",
	Armor:     "cards_stats.armor",
	Damage:    "cards_stats.damage",
	Healing:   "cards_stats.healing",
	Speed:     "cards_stats.speed",
	CreatedAt: "cards_stats.created_at",
	UpdatedAt: "cards_stats.updated_at",
	DeletedAt: "cards_stats.deleted_at",
}

// Generated where

var CardsStatWhere = struct {
	CardID    whereHelperstring
	Health    whereHelperint
	Armor     whereHelperint
	Damage    whereHelperint
	Healing   whereHelperint
	Speed     whereHelperint
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
	DeletedAt whereHelpernull_Time
}{
	CardID:    whereHelperstring{field: "\"cards_stats\".\"card_id\""},
	Health:    whereHelperint{field: "\"cards_stats\".\"health\""},
	Armor:     whereHelperint{field: "\"cards_stats\".\"armor\""},
	Damage:    whereHelperint{field: "\"cards_stats\".\"damage\""},
	Healing:   whereHelperint{field: "\"cards_stats\".\"healing\""},
	Speed:     whereHelperint{field: "\"cards_stats\".\"speed\""},
	CreatedAt: whereHelpertime_Time{field: "\"cards_stats\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"cards_stats\".\"updated_at\""},
	DeletedAt: whereHelpernull_Time{field: "\"cards_stats\".\"deleted_at\""},
}

// CardsStatRels is where relationship names are stored.
var CardsStatRels = struct {
	Card   string
	IDCard string
}{
	Card:   "Card",
	IDCard: "IDCard",
}

// cardsStatR is where relationships are stored.
type cardsStatR struct {
	Card   *Card `boil:"Card" json:"Card" toml:"Card" yaml:"Card"`
	IDCard *Card `boil:"IDCard" json:"IDCard" toml:"IDCard" yaml:"IDCard"`
}

// NewStruct creates a new relationship struct
func (*cardsStatR) NewStruct() *cardsStatR {
	return &cardsStatR{}
}

func (r *cardsStatR) GetCard() *Card {
	if r == nil {
		return nil
	}
	return r.Card
}

func (r *cardsStatR) GetIDCard() *Card {
	if r == nil {
		return nil
	}
	return r.IDCard
}

// cardsStatL is where Load methods for each relationship are stored.
type cardsStatL struct{}

var (
	cardsStatAllColumns            = []string{"card_id", "health", "armor", "damage", "healing", "speed", "created_at", "updated_at", "deleted_at"}
	cardsStatColumnsWithoutDefault = []string{"card_id", "health", "armor", "damage", "healing", "speed"}
	cardsStatColumnsWithDefault    = []string{"created_at", "updated_at", "deleted_at"}
	cardsStatPrimaryKeyColumns     = []string{"card_id"}
	cardsStatGeneratedColumns      = []string{}
)

type (
	// CardsStatSlice is an alias for a slice of pointers to CardsStat.
	// This should almost always be used instead of []CardsStat.
	CardsStatSlice []*CardsStat
	// CardsStatHook is the signature for custom CardsStat hook methods
	CardsStatHook func(context.Context, boil.ContextExecutor, *CardsStat) error

	cardsStatQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	cardsStatType                 = reflect.TypeOf(&CardsStat{})
	cardsStatMapping              = queries.MakeStructMapping(cardsStatType)
	cardsStatPrimaryKeyMapping, _ = queries.BindMapping(cardsStatType, cardsStatMapping, cardsStatPrimaryKeyColumns)
	cardsStatInsertCacheMut       sync.RWMutex
	cardsStatInsertCache          = make(map[string]insertCache)
	cardsStatUpdateCacheMut       sync.RWMutex
	cardsStatUpdateCache          = make(map[string]updateCache)
	cardsStatUpsertCacheMut       sync.RWMutex
	cardsStatUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var cardsStatAfterSelectMu sync.Mutex
var cardsStatAfterSelectHooks []CardsStatHook

var cardsStatBeforeInsertMu sync.Mutex
var cardsStatBeforeInsertHooks []CardsStatHook
var cardsStatAfterInsertMu sync.Mutex
var cardsStatAfterInsertHooks []CardsStatHook

var cardsStatBeforeUpdateMu sync.Mutex
var cardsStatBeforeUpdateHooks []CardsStatHook
var cardsStatAfterUpdateMu sync.Mutex
var cardsStatAfterUpdateHooks []CardsStatHook

var cardsStatBeforeDeleteMu sync.Mutex
var cardsStatBeforeDeleteHooks []CardsStatHook
var cardsStatAfterDeleteMu sync.Mutex
var cardsStatAfterDeleteHooks []CardsStatHook

var cardsStatBeforeUpsertMu sync.Mutex
var cardsStatBeforeUpsertHooks []CardsStatHook
var cardsStatAfterUpsertMu sync.Mutex
var cardsStatAfterUpsertHooks []CardsStatHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CardsStat) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cardsStatAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CardsStat) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cardsStatBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CardsStat) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cardsStatAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CardsStat) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cardsStatBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CardsStat) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cardsStatAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CardsStat) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cardsStatBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CardsStat) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cardsStatAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CardsStat) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cardsStatBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CardsStat) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cardsStatAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCardsStatHook registers your hook function for all future operations.
func AddCardsStatHook(hookPoint boil.HookPoint, cardsStatHook CardsStatHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		cardsStatAfterSelectMu.Lock()
		cardsStatAfterSelectHooks = append(cardsStatAfterSelectHooks, cardsStatHook)
		cardsStatAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		cardsStatBeforeInsertMu.Lock()
		cardsStatBeforeInsertHooks = append(cardsStatBeforeInsertHooks, cardsStatHook)
		cardsStatBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		cardsStatAfterInsertMu.Lock()
		cardsStatAfterInsertHooks = append(cardsStatAfterInsertHooks, cardsStatHook)
		cardsStatAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		cardsStatBeforeUpdateMu.Lock()
		cardsStatBeforeUpdateHooks = append(cardsStatBeforeUpdateHooks, cardsStatHook)
		cardsStatBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		cardsStatAfterUpdateMu.Lock()
		cardsStatAfterUpdateHooks = append(cardsStatAfterUpdateHooks, cardsStatHook)
		cardsStatAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		cardsStatBeforeDeleteMu.Lock()
		cardsStatBeforeDeleteHooks = append(cardsStatBeforeDeleteHooks, cardsStatHook)
		cardsStatBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		cardsStatAfterDeleteMu.Lock()
		cardsStatAfterDeleteHooks = append(cardsStatAfterDeleteHooks, cardsStatHook)
		cardsStatAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		cardsStatBeforeUpsertMu.Lock()
		cardsStatBeforeUpsertHooks = append(cardsStatBeforeUpsertHooks, cardsStatHook)
		cardsStatBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		cardsStatAfterUpsertMu.Lock()
		cardsStatAfterUpsertHooks = append(cardsStatAfterUpsertHooks, cardsStatHook)
		cardsStatAfterUpsertMu.Unlock()
	}
}

// OneG returns a single cardsStat record from the query using the global executor.
func (q cardsStatQuery) OneG(ctx context.Context) (*CardsStat, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single cardsStat record from the query.
func (q cardsStatQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CardsStat, error) {
	o := &CardsStat{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for cards_stats")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all CardsStat records from the query using the global executor.
func (q cardsStatQuery) AllG(ctx context.Context) (CardsStatSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all CardsStat records from the query.
func (q cardsStatQuery) All(ctx context.Context, exec boil.ContextExecutor) (CardsStatSlice, error) {
	var o []*CardsStat

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CardsStat slice")
	}

	if len(cardsStatAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all CardsStat records in the query using the global executor
func (q cardsStatQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all CardsStat records in the query.
func (q cardsStatQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count cards_stats rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q cardsStatQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q cardsStatQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if cards_stats exists")
	}

	return count > 0, nil
}

// Card pointed to by the foreign key.
func (o *CardsStat) Card(mods ...qm.QueryMod) cardQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CardID),
	}

	queryMods = append(queryMods, mods...)

	return Cards(queryMods...)
}

// IDCard pointed to by the foreign key.
func (o *CardsStat) IDCard(mods ...qm.QueryMod) cardQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CardID),
	}

	queryMods = append(queryMods, mods...)

	return Cards(queryMods...)
}

// LoadCard allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (cardsStatL) LoadCard(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCardsStat interface{}, mods queries.Applicator) error {
	var slice []*CardsStat
	var object *CardsStat

	if singular {
		var ok bool
		object, ok = maybeCardsStat.(*CardsStat)
		if !ok {
			object = new(CardsStat)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCardsStat)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCardsStat))
			}
		}
	} else {
		s, ok := maybeCardsStat.(*[]*CardsStat)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCardsStat)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCardsStat))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &cardsStatR{}
		}
		args[object.CardID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &cardsStatR{}
			}

			args[obj.CardID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`cards`),
		qm.WhereIn(`cards.id in ?`, argsSlice...),
		qmhelper.WhereIsNull(`cards.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Card")
	}

	var resultSlice []*Card
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Card")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for cards")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for cards")
	}

	if len(cardAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Card = foreign
		if foreign.R == nil {
			foreign.R = &cardR{}
		}
		foreign.R.CardsStat = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CardID == foreign.ID {
				local.R.Card = foreign
				if foreign.R == nil {
					foreign.R = &cardR{}
				}
				foreign.R.CardsStat = local
				break
			}
		}
	}

	return nil
}

// LoadIDCard allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (cardsStatL) LoadIDCard(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCardsStat interface{}, mods queries.Applicator) error {
	var slice []*CardsStat
	var object *CardsStat

	if singular {
		var ok bool
		object, ok = maybeCardsStat.(*CardsStat)
		if !ok {
			object = new(CardsStat)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCardsStat)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCardsStat))
			}
		}
	} else {
		s, ok := maybeCardsStat.(*[]*CardsStat)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCardsStat)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCardsStat))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &cardsStatR{}
		}
		args[object.CardID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &cardsStatR{}
			}

			args[obj.CardID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`cards`),
		qm.WhereIn(`cards.id in ?`, argsSlice...),
		qmhelper.WhereIsNull(`cards.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Card")
	}

	var resultSlice []*Card
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Card")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for cards")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for cards")
	}

	if len(cardAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IDCard = foreign
		if foreign.R == nil {
			foreign.R = &cardR{}
		}
		foreign.R.IDCardsStat = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CardID == foreign.ID {
				local.R.IDCard = foreign
				if foreign.R == nil {
					foreign.R = &cardR{}
				}
				foreign.R.IDCardsStat = local
				break
			}
		}
	}

	return nil
}

// SetCardG of the cardsStat to the related item.
// Sets o.R.Card to related.
// Adds o to related.R.CardsStat.
// Uses the global database handle.
func (o *CardsStat) SetCardG(ctx context.Context, insert bool, related *Card) error {
	return o.SetCard(ctx, boil.GetContextDB(), insert, related)
}

// SetCard of the cardsStat to the related item.
// Sets o.R.Card to related.
// Adds o to related.R.CardsStat.
func (o *CardsStat) SetCard(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Card) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"cards_stats\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"card_id"}),
		strmangle.WhereClause("\"", "\"", 2, cardsStatPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.CardID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CardID = related.ID
	if o.R == nil {
		o.R = &cardsStatR{
			Card: related,
		}
	} else {
		o.R.Card = related
	}

	if related.R == nil {
		related.R = &cardR{
			CardsStat: o,
		}
	} else {
		related.R.CardsStat = o
	}

	return nil
}

// SetIDCardG of the cardsStat to the related item.
// Sets o.R.IDCard to related.
// Adds o to related.R.IDCardsStat.
// Uses the global database handle.
func (o *CardsStat) SetIDCardG(ctx context.Context, insert bool, related *Card) error {
	return o.SetIDCard(ctx, boil.GetContextDB(), insert, related)
}

// SetIDCard of the cardsStat to the related item.
// Sets o.R.IDCard to related.
// Adds o to related.R.IDCardsStat.
func (o *CardsStat) SetIDCard(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Card) error {
	var err error

	if insert {
		related.ID = o.CardID

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"cards\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"id"}),
			strmangle.WhereClause("\"", "\"", 2, cardPrimaryKeyColumns),
		)
		values := []interface{}{o.CardID, related.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.ID = o.CardID
	}

	if o.R == nil {
		o.R = &cardsStatR{
			IDCard: related,
		}
	} else {
		o.R.IDCard = related
	}

	if related.R == nil {
		related.R = &cardR{
			IDCardsStat: o,
		}
	} else {
		related.R.IDCardsStat = o
	}
	return nil
}

// CardsStats retrieves all the records using an executor.
func CardsStats(mods ...qm.QueryMod) cardsStatQuery {
	mods = append(mods, qm.From("\"cards_stats\""), qmhelper.WhereIsNull("\"cards_stats\".\"deleted_at\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"cards_stats\".*"})
	}

	return cardsStatQuery{q}
}

// FindCardsStatG retrieves a single record by ID.
func FindCardsStatG(ctx context.Context, cardID string, selectCols ...string) (*CardsStat, error) {
	return FindCardsStat(ctx, boil.GetContextDB(), cardID, selectCols...)
}

// FindCardsStat retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCardsStat(ctx context.Context, exec boil.ContextExecutor, cardID string, selectCols ...string) (*CardsStat, error) {
	cardsStatObj := &CardsStat{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"cards_stats\" where \"card_id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, cardID)

	err := q.Bind(ctx, exec, cardsStatObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from cards_stats")
	}

	if err = cardsStatObj.doAfterSelectHooks(ctx, exec); err != nil {
		return cardsStatObj, err
	}

	return cardsStatObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *CardsStat) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CardsStat) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cards_stats provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cardsStatColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	cardsStatInsertCacheMut.RLock()
	cache, cached := cardsStatInsertCache[key]
	cardsStatInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			cardsStatAllColumns,
			cardsStatColumnsWithDefault,
			cardsStatColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(cardsStatType, cardsStatMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(cardsStatType, cardsStatMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"cards_stats\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"cards_stats\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into cards_stats")
	}

	if !cached {
		cardsStatInsertCacheMut.Lock()
		cardsStatInsertCache[key] = cache
		cardsStatInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single CardsStat record using the global executor.
// See Update for more documentation.
func (o *CardsStat) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the CardsStat.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CardsStat) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	cardsStatUpdateCacheMut.RLock()
	cache, cached := cardsStatUpdateCache[key]
	cardsStatUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			cardsStatAllColumns,
			cardsStatPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update cards_stats, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"cards_stats\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, cardsStatPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(cardsStatType, cardsStatMapping, append(wl, cardsStatPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update cards_stats row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for cards_stats")
	}

	if !cached {
		cardsStatUpdateCacheMut.Lock()
		cardsStatUpdateCache[key] = cache
		cardsStatUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q cardsStatQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q cardsStatQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for cards_stats")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for cards_stats")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o CardsStatSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CardsStatSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cardsStatPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"cards_stats\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, cardsStatPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in cardsStat slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all cardsStat")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *CardsStat) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CardsStat) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no cards_stats provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cardsStatColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	cardsStatUpsertCacheMut.RLock()
	cache, cached := cardsStatUpsertCache[key]
	cardsStatUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			cardsStatAllColumns,
			cardsStatColumnsWithDefault,
			cardsStatColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			cardsStatAllColumns,
			cardsStatPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert cards_stats, could not build update column list")
		}

		ret := strmangle.SetComplement(cardsStatAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(cardsStatPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert cards_stats, could not build conflict column list")
			}

			conflict = make([]string, len(cardsStatPrimaryKeyColumns))
			copy(conflict, cardsStatPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"cards_stats\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(cardsStatType, cardsStatMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(cardsStatType, cardsStatMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert cards_stats")
	}

	if !cached {
		cardsStatUpsertCacheMut.Lock()
		cardsStatUpsertCache[key] = cache
		cardsStatUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single CardsStat record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *CardsStat) DeleteG(ctx context.Context, hardDelete bool) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB(), hardDelete)
}

// Delete deletes a single CardsStat record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CardsStat) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CardsStat provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cardsStatPrimaryKeyMapping)
		sql = "DELETE FROM \"cards_stats\" WHERE \"card_id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"cards_stats\" SET %s WHERE \"card_id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(cardsStatType, cardsStatMapping, append(wl, cardsStatPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from cards_stats")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for cards_stats")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q cardsStatQuery) DeleteAllG(ctx context.Context, hardDelete bool) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB(), hardDelete)
}

// DeleteAll deletes all matching rows.
func (q cardsStatQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no cardsStatQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cards_stats")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cards_stats")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o CardsStatSlice) DeleteAllG(ctx context.Context, hardDelete bool) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB(), hardDelete)
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CardsStatSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(cardsStatBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cardsStatPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"cards_stats\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, cardsStatPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cardsStatPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"cards_stats\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, cardsStatPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cardsStat slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cards_stats")
	}

	if len(cardsStatAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *CardsStat) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no CardsStat provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CardsStat) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCardsStat(ctx, exec, o.CardID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CardsStatSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty CardsStatSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CardsStatSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CardsStatSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cardsStatPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"cards_stats\".* FROM \"cards_stats\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, cardsStatPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CardsStatSlice")
	}

	*o = slice

	return nil
}

// CardsStatExistsG checks if the CardsStat row exists.
func CardsStatExistsG(ctx context.Context, cardID string) (bool, error) {
	return CardsStatExists(ctx, boil.GetContextDB(), cardID)
}

// CardsStatExists checks if the CardsStat row exists.
func CardsStatExists(ctx context.Context, exec boil.ContextExecutor, cardID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"cards_stats\" where \"card_id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, cardID)
	}
	row := exec.QueryRowContext(ctx, sql, cardID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if cards_stats exists")
	}

	return exists, nil
}

// Exists checks if the CardsStat row exists.
func (o *CardsStat) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CardsStatExists(ctx, exec, o.CardID)
}
