// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AuthDiscordState is an object representing the database table.
type AuthDiscordState struct {
	State       string                `boil:"state" json:"state" toml:"state" yaml:"state"`
	PlayerID    null.String           `boil:"player_id" json:"player_id,omitempty" toml:"player_id" yaml:"player_id,omitempty"`
	RedirectURI string                `boil:"redirect_uri" json:"redirect_uri" toml:"redirect_uri" yaml:"redirect_uri"`
	ExpiresAt   time.Time             `boil:"expires_at" json:"expires_at" toml:"expires_at" yaml:"expires_at"`
	Type        AuthDiscordStatesType `boil:"type" json:"type" toml:"type" yaml:"type"`
	CreatedAt   time.Time             `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt   time.Time             `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt   null.Time             `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *authDiscordStateR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L authDiscordStateL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AuthDiscordStateColumns = struct {
	State       string
	PlayerID    string
	RedirectURI string
	ExpiresAt   string
	Type        string
	CreatedAt   string
	UpdatedAt   string
	DeletedAt   string
}{
	State:       "state",
	PlayerID:    "player_id",
	RedirectURI: "redirect_uri",
	ExpiresAt:   "expires_at",
	Type:        "type",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
	DeletedAt:   "deleted_at",
}

var AuthDiscordStateTableColumns = struct {
	State       string
	PlayerID    string
	RedirectURI string
	ExpiresAt   string
	Type        string
	CreatedAt   string
	UpdatedAt   string
	DeletedAt   string
}{
	State:       "auth_discord_states.state",
	PlayerID:    "auth_discord_states.player_id",
	RedirectURI: "auth_discord_states.redirect_uri",
	ExpiresAt:   "auth_discord_states.expires_at",
	Type:        "auth_discord_states.type",
	CreatedAt:   "auth_discord_states.created_at",
	UpdatedAt:   "auth_discord_states.updated_at",
	DeletedAt:   "auth_discord_states.deleted_at",
}

// Generated where

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) ILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" ILIKE ?", x)
}
func (w whereHelpernull_String) NILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT ILIKE ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelperAuthDiscordStatesType struct{ field string }

func (w whereHelperAuthDiscordStatesType) EQ(x AuthDiscordStatesType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperAuthDiscordStatesType) NEQ(x AuthDiscordStatesType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperAuthDiscordStatesType) LT(x AuthDiscordStatesType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperAuthDiscordStatesType) LTE(x AuthDiscordStatesType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperAuthDiscordStatesType) GT(x AuthDiscordStatesType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperAuthDiscordStatesType) GTE(x AuthDiscordStatesType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperAuthDiscordStatesType) IN(slice []AuthDiscordStatesType) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperAuthDiscordStatesType) NIN(slice []AuthDiscordStatesType) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var AuthDiscordStateWhere = struct {
	State       whereHelperstring
	PlayerID    whereHelpernull_String
	RedirectURI whereHelperstring
	ExpiresAt   whereHelpertime_Time
	Type        whereHelperAuthDiscordStatesType
	CreatedAt   whereHelpertime_Time
	UpdatedAt   whereHelpertime_Time
	DeletedAt   whereHelpernull_Time
}{
	State:       whereHelperstring{field: "\"auth_discord_states\".\"state\""},
	PlayerID:    whereHelpernull_String{field: "\"auth_discord_states\".\"player_id\""},
	RedirectURI: whereHelperstring{field: "\"auth_discord_states\".\"redirect_uri\""},
	ExpiresAt:   whereHelpertime_Time{field: "\"auth_discord_states\".\"expires_at\""},
	Type:        whereHelperAuthDiscordStatesType{field: "\"auth_discord_states\".\"type\""},
	CreatedAt:   whereHelpertime_Time{field: "\"auth_discord_states\".\"created_at\""},
	UpdatedAt:   whereHelpertime_Time{field: "\"auth_discord_states\".\"updated_at\""},
	DeletedAt:   whereHelpernull_Time{field: "\"auth_discord_states\".\"deleted_at\""},
}

// AuthDiscordStateRels is where relationship names are stored.
var AuthDiscordStateRels = struct {
	Player string
}{
	Player: "Player",
}

// authDiscordStateR is where relationships are stored.
type authDiscordStateR struct {
	Player *Player `boil:"Player" json:"Player" toml:"Player" yaml:"Player"`
}

// NewStruct creates a new relationship struct
func (*authDiscordStateR) NewStruct() *authDiscordStateR {
	return &authDiscordStateR{}
}

func (r *authDiscordStateR) GetPlayer() *Player {
	if r == nil {
		return nil
	}
	return r.Player
}

// authDiscordStateL is where Load methods for each relationship are stored.
type authDiscordStateL struct{}

var (
	authDiscordStateAllColumns            = []string{"state", "player_id", "redirect_uri", "expires_at", "type", "created_at", "updated_at", "deleted_at"}
	authDiscordStateColumnsWithoutDefault = []string{"state", "redirect_uri", "expires_at", "type"}
	authDiscordStateColumnsWithDefault    = []string{"player_id", "created_at", "updated_at", "deleted_at"}
	authDiscordStatePrimaryKeyColumns     = []string{"state"}
	authDiscordStateGeneratedColumns      = []string{}
)

type (
	// AuthDiscordStateSlice is an alias for a slice of pointers to AuthDiscordState.
	// This should almost always be used instead of []AuthDiscordState.
	AuthDiscordStateSlice []*AuthDiscordState
	// AuthDiscordStateHook is the signature for custom AuthDiscordState hook methods
	AuthDiscordStateHook func(context.Context, boil.ContextExecutor, *AuthDiscordState) error

	authDiscordStateQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	authDiscordStateType                 = reflect.TypeOf(&AuthDiscordState{})
	authDiscordStateMapping              = queries.MakeStructMapping(authDiscordStateType)
	authDiscordStatePrimaryKeyMapping, _ = queries.BindMapping(authDiscordStateType, authDiscordStateMapping, authDiscordStatePrimaryKeyColumns)
	authDiscordStateInsertCacheMut       sync.RWMutex
	authDiscordStateInsertCache          = make(map[string]insertCache)
	authDiscordStateUpdateCacheMut       sync.RWMutex
	authDiscordStateUpdateCache          = make(map[string]updateCache)
	authDiscordStateUpsertCacheMut       sync.RWMutex
	authDiscordStateUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var authDiscordStateAfterSelectMu sync.Mutex
var authDiscordStateAfterSelectHooks []AuthDiscordStateHook

var authDiscordStateBeforeInsertMu sync.Mutex
var authDiscordStateBeforeInsertHooks []AuthDiscordStateHook
var authDiscordStateAfterInsertMu sync.Mutex
var authDiscordStateAfterInsertHooks []AuthDiscordStateHook

var authDiscordStateBeforeUpdateMu sync.Mutex
var authDiscordStateBeforeUpdateHooks []AuthDiscordStateHook
var authDiscordStateAfterUpdateMu sync.Mutex
var authDiscordStateAfterUpdateHooks []AuthDiscordStateHook

var authDiscordStateBeforeDeleteMu sync.Mutex
var authDiscordStateBeforeDeleteHooks []AuthDiscordStateHook
var authDiscordStateAfterDeleteMu sync.Mutex
var authDiscordStateAfterDeleteHooks []AuthDiscordStateHook

var authDiscordStateBeforeUpsertMu sync.Mutex
var authDiscordStateBeforeUpsertHooks []AuthDiscordStateHook
var authDiscordStateAfterUpsertMu sync.Mutex
var authDiscordStateAfterUpsertHooks []AuthDiscordStateHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AuthDiscordState) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authDiscordStateAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AuthDiscordState) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authDiscordStateBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AuthDiscordState) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authDiscordStateAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AuthDiscordState) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authDiscordStateBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AuthDiscordState) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authDiscordStateAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AuthDiscordState) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authDiscordStateBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AuthDiscordState) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authDiscordStateAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AuthDiscordState) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authDiscordStateBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AuthDiscordState) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authDiscordStateAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAuthDiscordStateHook registers your hook function for all future operations.
func AddAuthDiscordStateHook(hookPoint boil.HookPoint, authDiscordStateHook AuthDiscordStateHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		authDiscordStateAfterSelectMu.Lock()
		authDiscordStateAfterSelectHooks = append(authDiscordStateAfterSelectHooks, authDiscordStateHook)
		authDiscordStateAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		authDiscordStateBeforeInsertMu.Lock()
		authDiscordStateBeforeInsertHooks = append(authDiscordStateBeforeInsertHooks, authDiscordStateHook)
		authDiscordStateBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		authDiscordStateAfterInsertMu.Lock()
		authDiscordStateAfterInsertHooks = append(authDiscordStateAfterInsertHooks, authDiscordStateHook)
		authDiscordStateAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		authDiscordStateBeforeUpdateMu.Lock()
		authDiscordStateBeforeUpdateHooks = append(authDiscordStateBeforeUpdateHooks, authDiscordStateHook)
		authDiscordStateBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		authDiscordStateAfterUpdateMu.Lock()
		authDiscordStateAfterUpdateHooks = append(authDiscordStateAfterUpdateHooks, authDiscordStateHook)
		authDiscordStateAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		authDiscordStateBeforeDeleteMu.Lock()
		authDiscordStateBeforeDeleteHooks = append(authDiscordStateBeforeDeleteHooks, authDiscordStateHook)
		authDiscordStateBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		authDiscordStateAfterDeleteMu.Lock()
		authDiscordStateAfterDeleteHooks = append(authDiscordStateAfterDeleteHooks, authDiscordStateHook)
		authDiscordStateAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		authDiscordStateBeforeUpsertMu.Lock()
		authDiscordStateBeforeUpsertHooks = append(authDiscordStateBeforeUpsertHooks, authDiscordStateHook)
		authDiscordStateBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		authDiscordStateAfterUpsertMu.Lock()
		authDiscordStateAfterUpsertHooks = append(authDiscordStateAfterUpsertHooks, authDiscordStateHook)
		authDiscordStateAfterUpsertMu.Unlock()
	}
}

// OneG returns a single authDiscordState record from the query using the global executor.
func (q authDiscordStateQuery) OneG(ctx context.Context) (*AuthDiscordState, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single authDiscordState record from the query.
func (q authDiscordStateQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AuthDiscordState, error) {
	o := &AuthDiscordState{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for auth_discord_states")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all AuthDiscordState records from the query using the global executor.
func (q authDiscordStateQuery) AllG(ctx context.Context) (AuthDiscordStateSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all AuthDiscordState records from the query.
func (q authDiscordStateQuery) All(ctx context.Context, exec boil.ContextExecutor) (AuthDiscordStateSlice, error) {
	var o []*AuthDiscordState

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AuthDiscordState slice")
	}

	if len(authDiscordStateAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all AuthDiscordState records in the query using the global executor
func (q authDiscordStateQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all AuthDiscordState records in the query.
func (q authDiscordStateQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count auth_discord_states rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q authDiscordStateQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q authDiscordStateQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if auth_discord_states exists")
	}

	return count > 0, nil
}

// Player pointed to by the foreign key.
func (o *AuthDiscordState) Player(mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PlayerID),
	}

	queryMods = append(queryMods, mods...)

	return Players(queryMods...)
}

// LoadPlayer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (authDiscordStateL) LoadPlayer(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAuthDiscordState interface{}, mods queries.Applicator) error {
	var slice []*AuthDiscordState
	var object *AuthDiscordState

	if singular {
		var ok bool
		object, ok = maybeAuthDiscordState.(*AuthDiscordState)
		if !ok {
			object = new(AuthDiscordState)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAuthDiscordState)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAuthDiscordState))
			}
		}
	} else {
		s, ok := maybeAuthDiscordState.(*[]*AuthDiscordState)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAuthDiscordState)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAuthDiscordState))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &authDiscordStateR{}
		}
		if !queries.IsNil(object.PlayerID) {
			args[object.PlayerID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &authDiscordStateR{}
			}

			if !queries.IsNil(obj.PlayerID) {
				args[obj.PlayerID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`players`),
		qm.WhereIn(`players.id in ?`, argsSlice...),
		qmhelper.WhereIsNull(`players.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players")
	}

	if len(playerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Player = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.AuthDiscordStates = append(foreign.R.AuthDiscordStates, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.PlayerID, foreign.ID) {
				local.R.Player = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.AuthDiscordStates = append(foreign.R.AuthDiscordStates, local)
				break
			}
		}
	}

	return nil
}

// SetPlayerG of the authDiscordState to the related item.
// Sets o.R.Player to related.
// Adds o to related.R.AuthDiscordStates.
// Uses the global database handle.
func (o *AuthDiscordState) SetPlayerG(ctx context.Context, insert bool, related *Player) error {
	return o.SetPlayer(ctx, boil.GetContextDB(), insert, related)
}

// SetPlayer of the authDiscordState to the related item.
// Sets o.R.Player to related.
// Adds o to related.R.AuthDiscordStates.
func (o *AuthDiscordState) SetPlayer(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"auth_discord_states\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"player_id"}),
		strmangle.WhereClause("\"", "\"", 2, authDiscordStatePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.State}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.PlayerID, related.ID)
	if o.R == nil {
		o.R = &authDiscordStateR{
			Player: related,
		}
	} else {
		o.R.Player = related
	}

	if related.R == nil {
		related.R = &playerR{
			AuthDiscordStates: AuthDiscordStateSlice{o},
		}
	} else {
		related.R.AuthDiscordStates = append(related.R.AuthDiscordStates, o)
	}

	return nil
}

// RemovePlayerG relationship.
// Sets o.R.Player to nil.
// Removes o from all passed in related items' relationships struct.
// Uses the global database handle.
func (o *AuthDiscordState) RemovePlayerG(ctx context.Context, related *Player) error {
	return o.RemovePlayer(ctx, boil.GetContextDB(), related)
}

// RemovePlayer relationship.
// Sets o.R.Player to nil.
// Removes o from all passed in related items' relationships struct.
func (o *AuthDiscordState) RemovePlayer(ctx context.Context, exec boil.ContextExecutor, related *Player) error {
	var err error

	queries.SetScanner(&o.PlayerID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("player_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Player = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.AuthDiscordStates {
		if queries.Equal(o.PlayerID, ri.PlayerID) {
			continue
		}

		ln := len(related.R.AuthDiscordStates)
		if ln > 1 && i < ln-1 {
			related.R.AuthDiscordStates[i] = related.R.AuthDiscordStates[ln-1]
		}
		related.R.AuthDiscordStates = related.R.AuthDiscordStates[:ln-1]
		break
	}
	return nil
}

// AuthDiscordStates retrieves all the records using an executor.
func AuthDiscordStates(mods ...qm.QueryMod) authDiscordStateQuery {
	mods = append(mods, qm.From("\"auth_discord_states\""), qmhelper.WhereIsNull("\"auth_discord_states\".\"deleted_at\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"auth_discord_states\".*"})
	}

	return authDiscordStateQuery{q}
}

// FindAuthDiscordStateG retrieves a single record by ID.
func FindAuthDiscordStateG(ctx context.Context, state string, selectCols ...string) (*AuthDiscordState, error) {
	return FindAuthDiscordState(ctx, boil.GetContextDB(), state, selectCols...)
}

// FindAuthDiscordState retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAuthDiscordState(ctx context.Context, exec boil.ContextExecutor, state string, selectCols ...string) (*AuthDiscordState, error) {
	authDiscordStateObj := &AuthDiscordState{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"auth_discord_states\" where \"state\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, state)

	err := q.Bind(ctx, exec, authDiscordStateObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from auth_discord_states")
	}

	if err = authDiscordStateObj.doAfterSelectHooks(ctx, exec); err != nil {
		return authDiscordStateObj, err
	}

	return authDiscordStateObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *AuthDiscordState) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AuthDiscordState) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no auth_discord_states provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(authDiscordStateColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	authDiscordStateInsertCacheMut.RLock()
	cache, cached := authDiscordStateInsertCache[key]
	authDiscordStateInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			authDiscordStateAllColumns,
			authDiscordStateColumnsWithDefault,
			authDiscordStateColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(authDiscordStateType, authDiscordStateMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(authDiscordStateType, authDiscordStateMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"auth_discord_states\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"auth_discord_states\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into auth_discord_states")
	}

	if !cached {
		authDiscordStateInsertCacheMut.Lock()
		authDiscordStateInsertCache[key] = cache
		authDiscordStateInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single AuthDiscordState record using the global executor.
// See Update for more documentation.
func (o *AuthDiscordState) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the AuthDiscordState.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AuthDiscordState) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	authDiscordStateUpdateCacheMut.RLock()
	cache, cached := authDiscordStateUpdateCache[key]
	authDiscordStateUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			authDiscordStateAllColumns,
			authDiscordStatePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update auth_discord_states, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"auth_discord_states\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, authDiscordStatePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(authDiscordStateType, authDiscordStateMapping, append(wl, authDiscordStatePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update auth_discord_states row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for auth_discord_states")
	}

	if !cached {
		authDiscordStateUpdateCacheMut.Lock()
		authDiscordStateUpdateCache[key] = cache
		authDiscordStateUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q authDiscordStateQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q authDiscordStateQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for auth_discord_states")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for auth_discord_states")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o AuthDiscordStateSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AuthDiscordStateSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), authDiscordStatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"auth_discord_states\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, authDiscordStatePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in authDiscordState slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all authDiscordState")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *AuthDiscordState) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AuthDiscordState) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no auth_discord_states provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(authDiscordStateColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	authDiscordStateUpsertCacheMut.RLock()
	cache, cached := authDiscordStateUpsertCache[key]
	authDiscordStateUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			authDiscordStateAllColumns,
			authDiscordStateColumnsWithDefault,
			authDiscordStateColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			authDiscordStateAllColumns,
			authDiscordStatePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert auth_discord_states, could not build update column list")
		}

		ret := strmangle.SetComplement(authDiscordStateAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(authDiscordStatePrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert auth_discord_states, could not build conflict column list")
			}

			conflict = make([]string, len(authDiscordStatePrimaryKeyColumns))
			copy(conflict, authDiscordStatePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"auth_discord_states\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(authDiscordStateType, authDiscordStateMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(authDiscordStateType, authDiscordStateMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert auth_discord_states")
	}

	if !cached {
		authDiscordStateUpsertCacheMut.Lock()
		authDiscordStateUpsertCache[key] = cache
		authDiscordStateUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single AuthDiscordState record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *AuthDiscordState) DeleteG(ctx context.Context, hardDelete bool) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB(), hardDelete)
}

// Delete deletes a single AuthDiscordState record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AuthDiscordState) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AuthDiscordState provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), authDiscordStatePrimaryKeyMapping)
		sql = "DELETE FROM \"auth_discord_states\" WHERE \"state\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"auth_discord_states\" SET %s WHERE \"state\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(authDiscordStateType, authDiscordStateMapping, append(wl, authDiscordStatePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from auth_discord_states")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for auth_discord_states")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q authDiscordStateQuery) DeleteAllG(ctx context.Context, hardDelete bool) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB(), hardDelete)
}

// DeleteAll deletes all matching rows.
func (q authDiscordStateQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no authDiscordStateQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from auth_discord_states")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for auth_discord_states")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o AuthDiscordStateSlice) DeleteAllG(ctx context.Context, hardDelete bool) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB(), hardDelete)
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AuthDiscordStateSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(authDiscordStateBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), authDiscordStatePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"auth_discord_states\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, authDiscordStatePrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), authDiscordStatePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"auth_discord_states\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, authDiscordStatePrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from authDiscordState slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for auth_discord_states")
	}

	if len(authDiscordStateAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *AuthDiscordState) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no AuthDiscordState provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AuthDiscordState) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAuthDiscordState(ctx, exec, o.State)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AuthDiscordStateSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty AuthDiscordStateSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AuthDiscordStateSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AuthDiscordStateSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), authDiscordStatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"auth_discord_states\".* FROM \"auth_discord_states\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, authDiscordStatePrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AuthDiscordStateSlice")
	}

	*o = slice

	return nil
}

// AuthDiscordStateExistsG checks if the AuthDiscordState row exists.
func AuthDiscordStateExistsG(ctx context.Context, state string) (bool, error) {
	return AuthDiscordStateExists(ctx, boil.GetContextDB(), state)
}

// AuthDiscordStateExists checks if the AuthDiscordState row exists.
func AuthDiscordStateExists(ctx context.Context, exec boil.ContextExecutor, state string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"auth_discord_states\" where \"state\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, state)
	}
	row := exec.QueryRowContext(ctx, sql, state)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if auth_discord_states exists")
	}

	return exists, nil
}

// Exists checks if the AuthDiscordState row exists.
func (o *AuthDiscordState) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return AuthDiscordStateExists(ctx, exec, o.State)
}
