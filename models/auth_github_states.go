// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AuthGithubState is an object representing the database table.
type AuthGithubState struct {
	State     string               `boil:"state" json:"state" toml:"state" yaml:"state"`
	PlayerID  string               `boil:"player_id" json:"player_id" toml:"player_id" yaml:"player_id"`
	ExpiresAt time.Time            `boil:"expires_at" json:"expires_at" toml:"expires_at" yaml:"expires_at"`
	Type      AuthGithubStatesType `boil:"type" json:"type" toml:"type" yaml:"type"`
	CreatedAt time.Time            `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time            `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt null.Time            `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *authGithubStateR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L authGithubStateL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AuthGithubStateColumns = struct {
	State     string
	PlayerID  string
	ExpiresAt string
	Type      string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
}{
	State:     "state",
	PlayerID:  "player_id",
	ExpiresAt: "expires_at",
	Type:      "type",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	DeletedAt: "deleted_at",
}

var AuthGithubStateTableColumns = struct {
	State     string
	PlayerID  string
	ExpiresAt string
	Type      string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
}{
	State:     "auth_github_states.state",
	PlayerID:  "auth_github_states.player_id",
	ExpiresAt: "auth_github_states.expires_at",
	Type:      "auth_github_states.type",
	CreatedAt: "auth_github_states.created_at",
	UpdatedAt: "auth_github_states.updated_at",
	DeletedAt: "auth_github_states.deleted_at",
}

// Generated where

type whereHelperAuthGithubStatesType struct{ field string }

func (w whereHelperAuthGithubStatesType) EQ(x AuthGithubStatesType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperAuthGithubStatesType) NEQ(x AuthGithubStatesType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperAuthGithubStatesType) LT(x AuthGithubStatesType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperAuthGithubStatesType) LTE(x AuthGithubStatesType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperAuthGithubStatesType) GT(x AuthGithubStatesType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperAuthGithubStatesType) GTE(x AuthGithubStatesType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperAuthGithubStatesType) IN(slice []AuthGithubStatesType) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperAuthGithubStatesType) NIN(slice []AuthGithubStatesType) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var AuthGithubStateWhere = struct {
	State     whereHelperstring
	PlayerID  whereHelperstring
	ExpiresAt whereHelpertime_Time
	Type      whereHelperAuthGithubStatesType
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
	DeletedAt whereHelpernull_Time
}{
	State:     whereHelperstring{field: "\"auth_github_states\".\"state\""},
	PlayerID:  whereHelperstring{field: "\"auth_github_states\".\"player_id\""},
	ExpiresAt: whereHelpertime_Time{field: "\"auth_github_states\".\"expires_at\""},
	Type:      whereHelperAuthGithubStatesType{field: "\"auth_github_states\".\"type\""},
	CreatedAt: whereHelpertime_Time{field: "\"auth_github_states\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"auth_github_states\".\"updated_at\""},
	DeletedAt: whereHelpernull_Time{field: "\"auth_github_states\".\"deleted_at\""},
}

// AuthGithubStateRels is where relationship names are stored.
var AuthGithubStateRels = struct {
	Player string
}{
	Player: "Player",
}

// authGithubStateR is where relationships are stored.
type authGithubStateR struct {
	Player *Player `boil:"Player" json:"Player" toml:"Player" yaml:"Player"`
}

// NewStruct creates a new relationship struct
func (*authGithubStateR) NewStruct() *authGithubStateR {
	return &authGithubStateR{}
}

func (r *authGithubStateR) GetPlayer() *Player {
	if r == nil {
		return nil
	}
	return r.Player
}

// authGithubStateL is where Load methods for each relationship are stored.
type authGithubStateL struct{}

var (
	authGithubStateAllColumns            = []string{"state", "player_id", "expires_at", "type", "created_at", "updated_at", "deleted_at"}
	authGithubStateColumnsWithoutDefault = []string{"state", "player_id", "expires_at", "type"}
	authGithubStateColumnsWithDefault    = []string{"created_at", "updated_at", "deleted_at"}
	authGithubStatePrimaryKeyColumns     = []string{"state"}
	authGithubStateGeneratedColumns      = []string{}
)

type (
	// AuthGithubStateSlice is an alias for a slice of pointers to AuthGithubState.
	// This should almost always be used instead of []AuthGithubState.
	AuthGithubStateSlice []*AuthGithubState
	// AuthGithubStateHook is the signature for custom AuthGithubState hook methods
	AuthGithubStateHook func(context.Context, boil.ContextExecutor, *AuthGithubState) error

	authGithubStateQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	authGithubStateType                 = reflect.TypeOf(&AuthGithubState{})
	authGithubStateMapping              = queries.MakeStructMapping(authGithubStateType)
	authGithubStatePrimaryKeyMapping, _ = queries.BindMapping(authGithubStateType, authGithubStateMapping, authGithubStatePrimaryKeyColumns)
	authGithubStateInsertCacheMut       sync.RWMutex
	authGithubStateInsertCache          = make(map[string]insertCache)
	authGithubStateUpdateCacheMut       sync.RWMutex
	authGithubStateUpdateCache          = make(map[string]updateCache)
	authGithubStateUpsertCacheMut       sync.RWMutex
	authGithubStateUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var authGithubStateAfterSelectMu sync.Mutex
var authGithubStateAfterSelectHooks []AuthGithubStateHook

var authGithubStateBeforeInsertMu sync.Mutex
var authGithubStateBeforeInsertHooks []AuthGithubStateHook
var authGithubStateAfterInsertMu sync.Mutex
var authGithubStateAfterInsertHooks []AuthGithubStateHook

var authGithubStateBeforeUpdateMu sync.Mutex
var authGithubStateBeforeUpdateHooks []AuthGithubStateHook
var authGithubStateAfterUpdateMu sync.Mutex
var authGithubStateAfterUpdateHooks []AuthGithubStateHook

var authGithubStateBeforeDeleteMu sync.Mutex
var authGithubStateBeforeDeleteHooks []AuthGithubStateHook
var authGithubStateAfterDeleteMu sync.Mutex
var authGithubStateAfterDeleteHooks []AuthGithubStateHook

var authGithubStateBeforeUpsertMu sync.Mutex
var authGithubStateBeforeUpsertHooks []AuthGithubStateHook
var authGithubStateAfterUpsertMu sync.Mutex
var authGithubStateAfterUpsertHooks []AuthGithubStateHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AuthGithubState) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authGithubStateAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AuthGithubState) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authGithubStateBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AuthGithubState) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authGithubStateAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AuthGithubState) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authGithubStateBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AuthGithubState) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authGithubStateAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AuthGithubState) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authGithubStateBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AuthGithubState) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authGithubStateAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AuthGithubState) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authGithubStateBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AuthGithubState) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authGithubStateAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAuthGithubStateHook registers your hook function for all future operations.
func AddAuthGithubStateHook(hookPoint boil.HookPoint, authGithubStateHook AuthGithubStateHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		authGithubStateAfterSelectMu.Lock()
		authGithubStateAfterSelectHooks = append(authGithubStateAfterSelectHooks, authGithubStateHook)
		authGithubStateAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		authGithubStateBeforeInsertMu.Lock()
		authGithubStateBeforeInsertHooks = append(authGithubStateBeforeInsertHooks, authGithubStateHook)
		authGithubStateBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		authGithubStateAfterInsertMu.Lock()
		authGithubStateAfterInsertHooks = append(authGithubStateAfterInsertHooks, authGithubStateHook)
		authGithubStateAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		authGithubStateBeforeUpdateMu.Lock()
		authGithubStateBeforeUpdateHooks = append(authGithubStateBeforeUpdateHooks, authGithubStateHook)
		authGithubStateBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		authGithubStateAfterUpdateMu.Lock()
		authGithubStateAfterUpdateHooks = append(authGithubStateAfterUpdateHooks, authGithubStateHook)
		authGithubStateAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		authGithubStateBeforeDeleteMu.Lock()
		authGithubStateBeforeDeleteHooks = append(authGithubStateBeforeDeleteHooks, authGithubStateHook)
		authGithubStateBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		authGithubStateAfterDeleteMu.Lock()
		authGithubStateAfterDeleteHooks = append(authGithubStateAfterDeleteHooks, authGithubStateHook)
		authGithubStateAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		authGithubStateBeforeUpsertMu.Lock()
		authGithubStateBeforeUpsertHooks = append(authGithubStateBeforeUpsertHooks, authGithubStateHook)
		authGithubStateBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		authGithubStateAfterUpsertMu.Lock()
		authGithubStateAfterUpsertHooks = append(authGithubStateAfterUpsertHooks, authGithubStateHook)
		authGithubStateAfterUpsertMu.Unlock()
	}
}

// OneG returns a single authGithubState record from the query using the global executor.
func (q authGithubStateQuery) OneG(ctx context.Context) (*AuthGithubState, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single authGithubState record from the query.
func (q authGithubStateQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AuthGithubState, error) {
	o := &AuthGithubState{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for auth_github_states")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all AuthGithubState records from the query using the global executor.
func (q authGithubStateQuery) AllG(ctx context.Context) (AuthGithubStateSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all AuthGithubState records from the query.
func (q authGithubStateQuery) All(ctx context.Context, exec boil.ContextExecutor) (AuthGithubStateSlice, error) {
	var o []*AuthGithubState

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AuthGithubState slice")
	}

	if len(authGithubStateAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all AuthGithubState records in the query using the global executor
func (q authGithubStateQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all AuthGithubState records in the query.
func (q authGithubStateQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count auth_github_states rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q authGithubStateQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q authGithubStateQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if auth_github_states exists")
	}

	return count > 0, nil
}

// Player pointed to by the foreign key.
func (o *AuthGithubState) Player(mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PlayerID),
	}

	queryMods = append(queryMods, mods...)

	return Players(queryMods...)
}

// LoadPlayer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (authGithubStateL) LoadPlayer(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAuthGithubState interface{}, mods queries.Applicator) error {
	var slice []*AuthGithubState
	var object *AuthGithubState

	if singular {
		var ok bool
		object, ok = maybeAuthGithubState.(*AuthGithubState)
		if !ok {
			object = new(AuthGithubState)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAuthGithubState)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAuthGithubState))
			}
		}
	} else {
		s, ok := maybeAuthGithubState.(*[]*AuthGithubState)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAuthGithubState)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAuthGithubState))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &authGithubStateR{}
		}
		args[object.PlayerID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &authGithubStateR{}
			}

			args[obj.PlayerID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`players`),
		qm.WhereIn(`players.id in ?`, argsSlice...),
		qmhelper.WhereIsNull(`players.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players")
	}

	if len(playerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Player = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.AuthGithubStates = append(foreign.R.AuthGithubStates, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PlayerID == foreign.ID {
				local.R.Player = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.AuthGithubStates = append(foreign.R.AuthGithubStates, local)
				break
			}
		}
	}

	return nil
}

// SetPlayerG of the authGithubState to the related item.
// Sets o.R.Player to related.
// Adds o to related.R.AuthGithubStates.
// Uses the global database handle.
func (o *AuthGithubState) SetPlayerG(ctx context.Context, insert bool, related *Player) error {
	return o.SetPlayer(ctx, boil.GetContextDB(), insert, related)
}

// SetPlayer of the authGithubState to the related item.
// Sets o.R.Player to related.
// Adds o to related.R.AuthGithubStates.
func (o *AuthGithubState) SetPlayer(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"auth_github_states\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"player_id"}),
		strmangle.WhereClause("\"", "\"", 2, authGithubStatePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.State}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PlayerID = related.ID
	if o.R == nil {
		o.R = &authGithubStateR{
			Player: related,
		}
	} else {
		o.R.Player = related
	}

	if related.R == nil {
		related.R = &playerR{
			AuthGithubStates: AuthGithubStateSlice{o},
		}
	} else {
		related.R.AuthGithubStates = append(related.R.AuthGithubStates, o)
	}

	return nil
}

// AuthGithubStates retrieves all the records using an executor.
func AuthGithubStates(mods ...qm.QueryMod) authGithubStateQuery {
	mods = append(mods, qm.From("\"auth_github_states\""), qmhelper.WhereIsNull("\"auth_github_states\".\"deleted_at\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"auth_github_states\".*"})
	}

	return authGithubStateQuery{q}
}

// FindAuthGithubStateG retrieves a single record by ID.
func FindAuthGithubStateG(ctx context.Context, state string, selectCols ...string) (*AuthGithubState, error) {
	return FindAuthGithubState(ctx, boil.GetContextDB(), state, selectCols...)
}

// FindAuthGithubState retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAuthGithubState(ctx context.Context, exec boil.ContextExecutor, state string, selectCols ...string) (*AuthGithubState, error) {
	authGithubStateObj := &AuthGithubState{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"auth_github_states\" where \"state\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, state)

	err := q.Bind(ctx, exec, authGithubStateObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from auth_github_states")
	}

	if err = authGithubStateObj.doAfterSelectHooks(ctx, exec); err != nil {
		return authGithubStateObj, err
	}

	return authGithubStateObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *AuthGithubState) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AuthGithubState) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no auth_github_states provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(authGithubStateColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	authGithubStateInsertCacheMut.RLock()
	cache, cached := authGithubStateInsertCache[key]
	authGithubStateInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			authGithubStateAllColumns,
			authGithubStateColumnsWithDefault,
			authGithubStateColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(authGithubStateType, authGithubStateMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(authGithubStateType, authGithubStateMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"auth_github_states\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"auth_github_states\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into auth_github_states")
	}

	if !cached {
		authGithubStateInsertCacheMut.Lock()
		authGithubStateInsertCache[key] = cache
		authGithubStateInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single AuthGithubState record using the global executor.
// See Update for more documentation.
func (o *AuthGithubState) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the AuthGithubState.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AuthGithubState) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	authGithubStateUpdateCacheMut.RLock()
	cache, cached := authGithubStateUpdateCache[key]
	authGithubStateUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			authGithubStateAllColumns,
			authGithubStatePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update auth_github_states, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"auth_github_states\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, authGithubStatePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(authGithubStateType, authGithubStateMapping, append(wl, authGithubStatePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update auth_github_states row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for auth_github_states")
	}

	if !cached {
		authGithubStateUpdateCacheMut.Lock()
		authGithubStateUpdateCache[key] = cache
		authGithubStateUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q authGithubStateQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q authGithubStateQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for auth_github_states")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for auth_github_states")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o AuthGithubStateSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AuthGithubStateSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), authGithubStatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"auth_github_states\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, authGithubStatePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in authGithubState slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all authGithubState")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *AuthGithubState) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AuthGithubState) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no auth_github_states provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(authGithubStateColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	authGithubStateUpsertCacheMut.RLock()
	cache, cached := authGithubStateUpsertCache[key]
	authGithubStateUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			authGithubStateAllColumns,
			authGithubStateColumnsWithDefault,
			authGithubStateColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			authGithubStateAllColumns,
			authGithubStatePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert auth_github_states, could not build update column list")
		}

		ret := strmangle.SetComplement(authGithubStateAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(authGithubStatePrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert auth_github_states, could not build conflict column list")
			}

			conflict = make([]string, len(authGithubStatePrimaryKeyColumns))
			copy(conflict, authGithubStatePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"auth_github_states\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(authGithubStateType, authGithubStateMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(authGithubStateType, authGithubStateMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert auth_github_states")
	}

	if !cached {
		authGithubStateUpsertCacheMut.Lock()
		authGithubStateUpsertCache[key] = cache
		authGithubStateUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single AuthGithubState record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *AuthGithubState) DeleteG(ctx context.Context, hardDelete bool) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB(), hardDelete)
}

// Delete deletes a single AuthGithubState record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AuthGithubState) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AuthGithubState provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), authGithubStatePrimaryKeyMapping)
		sql = "DELETE FROM \"auth_github_states\" WHERE \"state\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"auth_github_states\" SET %s WHERE \"state\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(authGithubStateType, authGithubStateMapping, append(wl, authGithubStatePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from auth_github_states")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for auth_github_states")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q authGithubStateQuery) DeleteAllG(ctx context.Context, hardDelete bool) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB(), hardDelete)
}

// DeleteAll deletes all matching rows.
func (q authGithubStateQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no authGithubStateQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from auth_github_states")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for auth_github_states")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o AuthGithubStateSlice) DeleteAllG(ctx context.Context, hardDelete bool) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB(), hardDelete)
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AuthGithubStateSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(authGithubStateBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), authGithubStatePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"auth_github_states\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, authGithubStatePrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), authGithubStatePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"auth_github_states\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, authGithubStatePrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from authGithubState slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for auth_github_states")
	}

	if len(authGithubStateAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *AuthGithubState) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no AuthGithubState provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AuthGithubState) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAuthGithubState(ctx, exec, o.State)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AuthGithubStateSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty AuthGithubStateSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AuthGithubStateSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AuthGithubStateSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), authGithubStatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"auth_github_states\".* FROM \"auth_github_states\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, authGithubStatePrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AuthGithubStateSlice")
	}

	*o = slice

	return nil
}

// AuthGithubStateExistsG checks if the AuthGithubState row exists.
func AuthGithubStateExistsG(ctx context.Context, state string) (bool, error) {
	return AuthGithubStateExists(ctx, boil.GetContextDB(), state)
}

// AuthGithubStateExists checks if the AuthGithubState row exists.
func AuthGithubStateExists(ctx context.Context, exec boil.ContextExecutor, state string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"auth_github_states\" where \"state\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, state)
	}
	row := exec.QueryRowContext(ctx, sql, state)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if auth_github_states exists")
	}

	return exists, nil
}

// Exists checks if the AuthGithubState row exists.
func (o *AuthGithubState) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return AuthGithubStateExists(ctx, exec, o.State)
}
