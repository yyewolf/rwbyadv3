// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AuthCookie is an object representing the database table.
type AuthCookie struct {
	ID        string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	PlayerID  string    `boil:"player_id" json:"player_id" toml:"player_id" yaml:"player_id"`
	ExpiresAt time.Time `boil:"expires_at" json:"expires_at" toml:"expires_at" yaml:"expires_at"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *authCookieR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L authCookieL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AuthCookieColumns = struct {
	ID        string
	PlayerID  string
	ExpiresAt string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
}{
	ID:        "id",
	PlayerID:  "player_id",
	ExpiresAt: "expires_at",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	DeletedAt: "deleted_at",
}

var AuthCookieTableColumns = struct {
	ID        string
	PlayerID  string
	ExpiresAt string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
}{
	ID:        "auth_cookies.id",
	PlayerID:  "auth_cookies.player_id",
	ExpiresAt: "auth_cookies.expires_at",
	CreatedAt: "auth_cookies.created_at",
	UpdatedAt: "auth_cookies.updated_at",
	DeletedAt: "auth_cookies.deleted_at",
}

// Generated where

var AuthCookieWhere = struct {
	ID        whereHelperstring
	PlayerID  whereHelperstring
	ExpiresAt whereHelpertime_Time
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
	DeletedAt whereHelpernull_Time
}{
	ID:        whereHelperstring{field: "\"auth_cookies\".\"id\""},
	PlayerID:  whereHelperstring{field: "\"auth_cookies\".\"player_id\""},
	ExpiresAt: whereHelpertime_Time{field: "\"auth_cookies\".\"expires_at\""},
	CreatedAt: whereHelpertime_Time{field: "\"auth_cookies\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"auth_cookies\".\"updated_at\""},
	DeletedAt: whereHelpernull_Time{field: "\"auth_cookies\".\"deleted_at\""},
}

// AuthCookieRels is where relationship names are stored.
var AuthCookieRels = struct {
	Player string
}{
	Player: "Player",
}

// authCookieR is where relationships are stored.
type authCookieR struct {
	Player *Player `boil:"Player" json:"Player" toml:"Player" yaml:"Player"`
}

// NewStruct creates a new relationship struct
func (*authCookieR) NewStruct() *authCookieR {
	return &authCookieR{}
}

func (r *authCookieR) GetPlayer() *Player {
	if r == nil {
		return nil
	}
	return r.Player
}

// authCookieL is where Load methods for each relationship are stored.
type authCookieL struct{}

var (
	authCookieAllColumns            = []string{"id", "player_id", "expires_at", "created_at", "updated_at", "deleted_at"}
	authCookieColumnsWithoutDefault = []string{"id", "player_id", "expires_at"}
	authCookieColumnsWithDefault    = []string{"created_at", "updated_at", "deleted_at"}
	authCookiePrimaryKeyColumns     = []string{"id"}
	authCookieGeneratedColumns      = []string{}
)

type (
	// AuthCookieSlice is an alias for a slice of pointers to AuthCookie.
	// This should almost always be used instead of []AuthCookie.
	AuthCookieSlice []*AuthCookie
	// AuthCookieHook is the signature for custom AuthCookie hook methods
	AuthCookieHook func(context.Context, boil.ContextExecutor, *AuthCookie) error

	authCookieQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	authCookieType                 = reflect.TypeOf(&AuthCookie{})
	authCookieMapping              = queries.MakeStructMapping(authCookieType)
	authCookiePrimaryKeyMapping, _ = queries.BindMapping(authCookieType, authCookieMapping, authCookiePrimaryKeyColumns)
	authCookieInsertCacheMut       sync.RWMutex
	authCookieInsertCache          = make(map[string]insertCache)
	authCookieUpdateCacheMut       sync.RWMutex
	authCookieUpdateCache          = make(map[string]updateCache)
	authCookieUpsertCacheMut       sync.RWMutex
	authCookieUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var authCookieAfterSelectMu sync.Mutex
var authCookieAfterSelectHooks []AuthCookieHook

var authCookieBeforeInsertMu sync.Mutex
var authCookieBeforeInsertHooks []AuthCookieHook
var authCookieAfterInsertMu sync.Mutex
var authCookieAfterInsertHooks []AuthCookieHook

var authCookieBeforeUpdateMu sync.Mutex
var authCookieBeforeUpdateHooks []AuthCookieHook
var authCookieAfterUpdateMu sync.Mutex
var authCookieAfterUpdateHooks []AuthCookieHook

var authCookieBeforeDeleteMu sync.Mutex
var authCookieBeforeDeleteHooks []AuthCookieHook
var authCookieAfterDeleteMu sync.Mutex
var authCookieAfterDeleteHooks []AuthCookieHook

var authCookieBeforeUpsertMu sync.Mutex
var authCookieBeforeUpsertHooks []AuthCookieHook
var authCookieAfterUpsertMu sync.Mutex
var authCookieAfterUpsertHooks []AuthCookieHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AuthCookie) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authCookieAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AuthCookie) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authCookieBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AuthCookie) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authCookieAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AuthCookie) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authCookieBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AuthCookie) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authCookieAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AuthCookie) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authCookieBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AuthCookie) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authCookieAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AuthCookie) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authCookieBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AuthCookie) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authCookieAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAuthCookieHook registers your hook function for all future operations.
func AddAuthCookieHook(hookPoint boil.HookPoint, authCookieHook AuthCookieHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		authCookieAfterSelectMu.Lock()
		authCookieAfterSelectHooks = append(authCookieAfterSelectHooks, authCookieHook)
		authCookieAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		authCookieBeforeInsertMu.Lock()
		authCookieBeforeInsertHooks = append(authCookieBeforeInsertHooks, authCookieHook)
		authCookieBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		authCookieAfterInsertMu.Lock()
		authCookieAfterInsertHooks = append(authCookieAfterInsertHooks, authCookieHook)
		authCookieAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		authCookieBeforeUpdateMu.Lock()
		authCookieBeforeUpdateHooks = append(authCookieBeforeUpdateHooks, authCookieHook)
		authCookieBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		authCookieAfterUpdateMu.Lock()
		authCookieAfterUpdateHooks = append(authCookieAfterUpdateHooks, authCookieHook)
		authCookieAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		authCookieBeforeDeleteMu.Lock()
		authCookieBeforeDeleteHooks = append(authCookieBeforeDeleteHooks, authCookieHook)
		authCookieBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		authCookieAfterDeleteMu.Lock()
		authCookieAfterDeleteHooks = append(authCookieAfterDeleteHooks, authCookieHook)
		authCookieAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		authCookieBeforeUpsertMu.Lock()
		authCookieBeforeUpsertHooks = append(authCookieBeforeUpsertHooks, authCookieHook)
		authCookieBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		authCookieAfterUpsertMu.Lock()
		authCookieAfterUpsertHooks = append(authCookieAfterUpsertHooks, authCookieHook)
		authCookieAfterUpsertMu.Unlock()
	}
}

// OneG returns a single authCookie record from the query using the global executor.
func (q authCookieQuery) OneG(ctx context.Context) (*AuthCookie, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single authCookie record from the query.
func (q authCookieQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AuthCookie, error) {
	o := &AuthCookie{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for auth_cookies")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all AuthCookie records from the query using the global executor.
func (q authCookieQuery) AllG(ctx context.Context) (AuthCookieSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all AuthCookie records from the query.
func (q authCookieQuery) All(ctx context.Context, exec boil.ContextExecutor) (AuthCookieSlice, error) {
	var o []*AuthCookie

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AuthCookie slice")
	}

	if len(authCookieAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all AuthCookie records in the query using the global executor
func (q authCookieQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all AuthCookie records in the query.
func (q authCookieQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count auth_cookies rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q authCookieQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q authCookieQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if auth_cookies exists")
	}

	return count > 0, nil
}

// Player pointed to by the foreign key.
func (o *AuthCookie) Player(mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PlayerID),
	}

	queryMods = append(queryMods, mods...)

	return Players(queryMods...)
}

// LoadPlayer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (authCookieL) LoadPlayer(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAuthCookie interface{}, mods queries.Applicator) error {
	var slice []*AuthCookie
	var object *AuthCookie

	if singular {
		var ok bool
		object, ok = maybeAuthCookie.(*AuthCookie)
		if !ok {
			object = new(AuthCookie)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAuthCookie)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAuthCookie))
			}
		}
	} else {
		s, ok := maybeAuthCookie.(*[]*AuthCookie)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAuthCookie)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAuthCookie))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &authCookieR{}
		}
		args[object.PlayerID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &authCookieR{}
			}

			args[obj.PlayerID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`players`),
		qm.WhereIn(`players.id in ?`, argsSlice...),
		qmhelper.WhereIsNull(`players.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players")
	}

	if len(playerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Player = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.AuthCookies = append(foreign.R.AuthCookies, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PlayerID == foreign.ID {
				local.R.Player = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.AuthCookies = append(foreign.R.AuthCookies, local)
				break
			}
		}
	}

	return nil
}

// SetPlayerG of the authCookie to the related item.
// Sets o.R.Player to related.
// Adds o to related.R.AuthCookies.
// Uses the global database handle.
func (o *AuthCookie) SetPlayerG(ctx context.Context, insert bool, related *Player) error {
	return o.SetPlayer(ctx, boil.GetContextDB(), insert, related)
}

// SetPlayer of the authCookie to the related item.
// Sets o.R.Player to related.
// Adds o to related.R.AuthCookies.
func (o *AuthCookie) SetPlayer(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"auth_cookies\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"player_id"}),
		strmangle.WhereClause("\"", "\"", 2, authCookiePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PlayerID = related.ID
	if o.R == nil {
		o.R = &authCookieR{
			Player: related,
		}
	} else {
		o.R.Player = related
	}

	if related.R == nil {
		related.R = &playerR{
			AuthCookies: AuthCookieSlice{o},
		}
	} else {
		related.R.AuthCookies = append(related.R.AuthCookies, o)
	}

	return nil
}

// AuthCookies retrieves all the records using an executor.
func AuthCookies(mods ...qm.QueryMod) authCookieQuery {
	mods = append(mods, qm.From("\"auth_cookies\""), qmhelper.WhereIsNull("\"auth_cookies\".\"deleted_at\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"auth_cookies\".*"})
	}

	return authCookieQuery{q}
}

// FindAuthCookieG retrieves a single record by ID.
func FindAuthCookieG(ctx context.Context, iD string, selectCols ...string) (*AuthCookie, error) {
	return FindAuthCookie(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindAuthCookie retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAuthCookie(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*AuthCookie, error) {
	authCookieObj := &AuthCookie{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"auth_cookies\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, authCookieObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from auth_cookies")
	}

	if err = authCookieObj.doAfterSelectHooks(ctx, exec); err != nil {
		return authCookieObj, err
	}

	return authCookieObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *AuthCookie) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AuthCookie) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no auth_cookies provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(authCookieColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	authCookieInsertCacheMut.RLock()
	cache, cached := authCookieInsertCache[key]
	authCookieInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			authCookieAllColumns,
			authCookieColumnsWithDefault,
			authCookieColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(authCookieType, authCookieMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(authCookieType, authCookieMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"auth_cookies\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"auth_cookies\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into auth_cookies")
	}

	if !cached {
		authCookieInsertCacheMut.Lock()
		authCookieInsertCache[key] = cache
		authCookieInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single AuthCookie record using the global executor.
// See Update for more documentation.
func (o *AuthCookie) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the AuthCookie.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AuthCookie) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	authCookieUpdateCacheMut.RLock()
	cache, cached := authCookieUpdateCache[key]
	authCookieUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			authCookieAllColumns,
			authCookiePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update auth_cookies, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"auth_cookies\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, authCookiePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(authCookieType, authCookieMapping, append(wl, authCookiePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update auth_cookies row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for auth_cookies")
	}

	if !cached {
		authCookieUpdateCacheMut.Lock()
		authCookieUpdateCache[key] = cache
		authCookieUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q authCookieQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q authCookieQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for auth_cookies")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for auth_cookies")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o AuthCookieSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AuthCookieSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), authCookiePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"auth_cookies\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, authCookiePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in authCookie slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all authCookie")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *AuthCookie) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AuthCookie) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no auth_cookies provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(authCookieColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	authCookieUpsertCacheMut.RLock()
	cache, cached := authCookieUpsertCache[key]
	authCookieUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			authCookieAllColumns,
			authCookieColumnsWithDefault,
			authCookieColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			authCookieAllColumns,
			authCookiePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert auth_cookies, could not build update column list")
		}

		ret := strmangle.SetComplement(authCookieAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(authCookiePrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert auth_cookies, could not build conflict column list")
			}

			conflict = make([]string, len(authCookiePrimaryKeyColumns))
			copy(conflict, authCookiePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"auth_cookies\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(authCookieType, authCookieMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(authCookieType, authCookieMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert auth_cookies")
	}

	if !cached {
		authCookieUpsertCacheMut.Lock()
		authCookieUpsertCache[key] = cache
		authCookieUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single AuthCookie record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *AuthCookie) DeleteG(ctx context.Context, hardDelete bool) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB(), hardDelete)
}

// Delete deletes a single AuthCookie record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AuthCookie) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AuthCookie provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), authCookiePrimaryKeyMapping)
		sql = "DELETE FROM \"auth_cookies\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"auth_cookies\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(authCookieType, authCookieMapping, append(wl, authCookiePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from auth_cookies")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for auth_cookies")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q authCookieQuery) DeleteAllG(ctx context.Context, hardDelete bool) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB(), hardDelete)
}

// DeleteAll deletes all matching rows.
func (q authCookieQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no authCookieQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from auth_cookies")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for auth_cookies")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o AuthCookieSlice) DeleteAllG(ctx context.Context, hardDelete bool) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB(), hardDelete)
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AuthCookieSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(authCookieBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), authCookiePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"auth_cookies\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, authCookiePrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), authCookiePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"auth_cookies\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, authCookiePrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from authCookie slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for auth_cookies")
	}

	if len(authCookieAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *AuthCookie) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no AuthCookie provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AuthCookie) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAuthCookie(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AuthCookieSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty AuthCookieSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AuthCookieSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AuthCookieSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), authCookiePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"auth_cookies\".* FROM \"auth_cookies\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, authCookiePrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AuthCookieSlice")
	}

	*o = slice

	return nil
}

// AuthCookieExistsG checks if the AuthCookie row exists.
func AuthCookieExistsG(ctx context.Context, iD string) (bool, error) {
	return AuthCookieExists(ctx, boil.GetContextDB(), iD)
}

// AuthCookieExists checks if the AuthCookie row exists.
func AuthCookieExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"auth_cookies\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if auth_cookies exists")
	}

	return exists, nil
}

// Exists checks if the AuthCookie row exists.
func (o *AuthCookie) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return AuthCookieExists(ctx, exec, o.ID)
}
