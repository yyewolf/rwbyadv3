// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"strconv"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/strmangle"
)

// M type is for providing columns and column values to UpdateAll.
type M map[string]interface{}

// ErrSyncFail occurs during insert when the record could not be retrieved in
// order to populate default value information. This usually happens when LastInsertId
// fails or there was a primary key configuration that was not resolvable.
var ErrSyncFail = errors.New("models: failed to synchronize data after insert")

type insertCache struct {
	query        string
	retQuery     string
	valueMapping []uint64
	retMapping   []uint64
}

type updateCache struct {
	query        string
	valueMapping []uint64
}

func makeCacheKey(cols boil.Columns, nzDefaults []string) string {
	buf := strmangle.GetBuffer()

	buf.WriteString(strconv.Itoa(cols.Kind))
	for _, w := range cols.Cols {
		buf.WriteString(w)
	}

	if len(nzDefaults) != 0 {
		buf.WriteByte('.')
	}
	for _, nz := range nzDefaults {
		buf.WriteString(nz)
	}

	str := buf.String()
	strmangle.PutBuffer(buf)
	return str
}

type AuthGithubStatesType string

// Enum values for AuthGithubStatesType
const (
	AuthGithubStatesTypeCheckStar AuthGithubStatesType = "check_star"
)

func AllAuthGithubStatesType() []AuthGithubStatesType {
	return []AuthGithubStatesType{
		AuthGithubStatesTypeCheckStar,
	}
}

func (e AuthGithubStatesType) IsValid() error {
	switch e {
	case AuthGithubStatesTypeCheckStar:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e AuthGithubStatesType) String() string {
	return string(e)
}

func (e AuthGithubStatesType) Ordinal() int {
	switch e {
	case AuthGithubStatesTypeCheckStar:
		return 0

	default:
		panic(errors.New("enum is not valid"))
	}
}

type LootBoxesType string

// Enum values for LootBoxesType
const (
	LootBoxesTypeClassic LootBoxesType = "classic"
	LootBoxesTypeRare    LootBoxesType = "rare"
	LootBoxesTypeLimited LootBoxesType = "limited"
	LootBoxesTypeSpecial LootBoxesType = "special"
)

func AllLootBoxesType() []LootBoxesType {
	return []LootBoxesType{
		LootBoxesTypeClassic,
		LootBoxesTypeRare,
		LootBoxesTypeLimited,
		LootBoxesTypeSpecial,
	}
}

func (e LootBoxesType) IsValid() error {
	switch e {
	case LootBoxesTypeClassic, LootBoxesTypeRare, LootBoxesTypeLimited, LootBoxesTypeSpecial:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e LootBoxesType) String() string {
	return string(e)
}

func (e LootBoxesType) Ordinal() int {
	switch e {
	case LootBoxesTypeClassic:
		return 0
	case LootBoxesTypeRare:
		return 1
	case LootBoxesTypeLimited:
		return 2
	case LootBoxesTypeSpecial:
		return 3

	default:
		panic(errors.New("enum is not valid"))
	}
}
