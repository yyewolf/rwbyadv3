// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AuctionsBid is an object representing the database table.
type AuctionsBid struct {
	ID        string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	AuctionID string    `boil:"auction_id" json:"auction_id" toml:"auction_id" yaml:"auction_id"`
	PlayerID  string    `boil:"player_id" json:"player_id" toml:"player_id" yaml:"player_id"`
	Price     int64     `boil:"price" json:"price" toml:"price" yaml:"price"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *auctionsBidR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L auctionsBidL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AuctionsBidColumns = struct {
	ID        string
	AuctionID string
	PlayerID  string
	Price     string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
}{
	ID:        "id",
	AuctionID: "auction_id",
	PlayerID:  "player_id",
	Price:     "price",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	DeletedAt: "deleted_at",
}

var AuctionsBidTableColumns = struct {
	ID        string
	AuctionID string
	PlayerID  string
	Price     string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
}{
	ID:        "auctions_bids.id",
	AuctionID: "auctions_bids.auction_id",
	PlayerID:  "auctions_bids.player_id",
	Price:     "auctions_bids.price",
	CreatedAt: "auctions_bids.created_at",
	UpdatedAt: "auctions_bids.updated_at",
	DeletedAt: "auctions_bids.deleted_at",
}

// Generated where

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var AuctionsBidWhere = struct {
	ID        whereHelperstring
	AuctionID whereHelperstring
	PlayerID  whereHelperstring
	Price     whereHelperint64
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
	DeletedAt whereHelpernull_Time
}{
	ID:        whereHelperstring{field: "\"auctions_bids\".\"id\""},
	AuctionID: whereHelperstring{field: "\"auctions_bids\".\"auction_id\""},
	PlayerID:  whereHelperstring{field: "\"auctions_bids\".\"player_id\""},
	Price:     whereHelperint64{field: "\"auctions_bids\".\"price\""},
	CreatedAt: whereHelpertime_Time{field: "\"auctions_bids\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"auctions_bids\".\"updated_at\""},
	DeletedAt: whereHelpernull_Time{field: "\"auctions_bids\".\"deleted_at\""},
}

// AuctionsBidRels is where relationship names are stored.
var AuctionsBidRels = struct {
	Auction string
	Player  string
}{
	Auction: "Auction",
	Player:  "Player",
}

// auctionsBidR is where relationships are stored.
type auctionsBidR struct {
	Auction *Auction `boil:"Auction" json:"Auction" toml:"Auction" yaml:"Auction"`
	Player  *Player  `boil:"Player" json:"Player" toml:"Player" yaml:"Player"`
}

// NewStruct creates a new relationship struct
func (*auctionsBidR) NewStruct() *auctionsBidR {
	return &auctionsBidR{}
}

func (r *auctionsBidR) GetAuction() *Auction {
	if r == nil {
		return nil
	}
	return r.Auction
}

func (r *auctionsBidR) GetPlayer() *Player {
	if r == nil {
		return nil
	}
	return r.Player
}

// auctionsBidL is where Load methods for each relationship are stored.
type auctionsBidL struct{}

var (
	auctionsBidAllColumns            = []string{"id", "auction_id", "player_id", "price", "created_at", "updated_at", "deleted_at"}
	auctionsBidColumnsWithoutDefault = []string{"id", "auction_id", "player_id", "price"}
	auctionsBidColumnsWithDefault    = []string{"created_at", "updated_at", "deleted_at"}
	auctionsBidPrimaryKeyColumns     = []string{"id"}
	auctionsBidGeneratedColumns      = []string{}
)

type (
	// AuctionsBidSlice is an alias for a slice of pointers to AuctionsBid.
	// This should almost always be used instead of []AuctionsBid.
	AuctionsBidSlice []*AuctionsBid
	// AuctionsBidHook is the signature for custom AuctionsBid hook methods
	AuctionsBidHook func(context.Context, boil.ContextExecutor, *AuctionsBid) error

	auctionsBidQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	auctionsBidType                 = reflect.TypeOf(&AuctionsBid{})
	auctionsBidMapping              = queries.MakeStructMapping(auctionsBidType)
	auctionsBidPrimaryKeyMapping, _ = queries.BindMapping(auctionsBidType, auctionsBidMapping, auctionsBidPrimaryKeyColumns)
	auctionsBidInsertCacheMut       sync.RWMutex
	auctionsBidInsertCache          = make(map[string]insertCache)
	auctionsBidUpdateCacheMut       sync.RWMutex
	auctionsBidUpdateCache          = make(map[string]updateCache)
	auctionsBidUpsertCacheMut       sync.RWMutex
	auctionsBidUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var auctionsBidAfterSelectMu sync.Mutex
var auctionsBidAfterSelectHooks []AuctionsBidHook

var auctionsBidBeforeInsertMu sync.Mutex
var auctionsBidBeforeInsertHooks []AuctionsBidHook
var auctionsBidAfterInsertMu sync.Mutex
var auctionsBidAfterInsertHooks []AuctionsBidHook

var auctionsBidBeforeUpdateMu sync.Mutex
var auctionsBidBeforeUpdateHooks []AuctionsBidHook
var auctionsBidAfterUpdateMu sync.Mutex
var auctionsBidAfterUpdateHooks []AuctionsBidHook

var auctionsBidBeforeDeleteMu sync.Mutex
var auctionsBidBeforeDeleteHooks []AuctionsBidHook
var auctionsBidAfterDeleteMu sync.Mutex
var auctionsBidAfterDeleteHooks []AuctionsBidHook

var auctionsBidBeforeUpsertMu sync.Mutex
var auctionsBidBeforeUpsertHooks []AuctionsBidHook
var auctionsBidAfterUpsertMu sync.Mutex
var auctionsBidAfterUpsertHooks []AuctionsBidHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AuctionsBid) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range auctionsBidAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AuctionsBid) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range auctionsBidBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AuctionsBid) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range auctionsBidAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AuctionsBid) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range auctionsBidBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AuctionsBid) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range auctionsBidAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AuctionsBid) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range auctionsBidBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AuctionsBid) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range auctionsBidAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AuctionsBid) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range auctionsBidBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AuctionsBid) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range auctionsBidAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAuctionsBidHook registers your hook function for all future operations.
func AddAuctionsBidHook(hookPoint boil.HookPoint, auctionsBidHook AuctionsBidHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		auctionsBidAfterSelectMu.Lock()
		auctionsBidAfterSelectHooks = append(auctionsBidAfterSelectHooks, auctionsBidHook)
		auctionsBidAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		auctionsBidBeforeInsertMu.Lock()
		auctionsBidBeforeInsertHooks = append(auctionsBidBeforeInsertHooks, auctionsBidHook)
		auctionsBidBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		auctionsBidAfterInsertMu.Lock()
		auctionsBidAfterInsertHooks = append(auctionsBidAfterInsertHooks, auctionsBidHook)
		auctionsBidAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		auctionsBidBeforeUpdateMu.Lock()
		auctionsBidBeforeUpdateHooks = append(auctionsBidBeforeUpdateHooks, auctionsBidHook)
		auctionsBidBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		auctionsBidAfterUpdateMu.Lock()
		auctionsBidAfterUpdateHooks = append(auctionsBidAfterUpdateHooks, auctionsBidHook)
		auctionsBidAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		auctionsBidBeforeDeleteMu.Lock()
		auctionsBidBeforeDeleteHooks = append(auctionsBidBeforeDeleteHooks, auctionsBidHook)
		auctionsBidBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		auctionsBidAfterDeleteMu.Lock()
		auctionsBidAfterDeleteHooks = append(auctionsBidAfterDeleteHooks, auctionsBidHook)
		auctionsBidAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		auctionsBidBeforeUpsertMu.Lock()
		auctionsBidBeforeUpsertHooks = append(auctionsBidBeforeUpsertHooks, auctionsBidHook)
		auctionsBidBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		auctionsBidAfterUpsertMu.Lock()
		auctionsBidAfterUpsertHooks = append(auctionsBidAfterUpsertHooks, auctionsBidHook)
		auctionsBidAfterUpsertMu.Unlock()
	}
}

// OneG returns a single auctionsBid record from the query using the global executor.
func (q auctionsBidQuery) OneG(ctx context.Context) (*AuctionsBid, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single auctionsBid record from the query.
func (q auctionsBidQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AuctionsBid, error) {
	o := &AuctionsBid{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for auctions_bids")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all AuctionsBid records from the query using the global executor.
func (q auctionsBidQuery) AllG(ctx context.Context) (AuctionsBidSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all AuctionsBid records from the query.
func (q auctionsBidQuery) All(ctx context.Context, exec boil.ContextExecutor) (AuctionsBidSlice, error) {
	var o []*AuctionsBid

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AuctionsBid slice")
	}

	if len(auctionsBidAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all AuctionsBid records in the query using the global executor
func (q auctionsBidQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all AuctionsBid records in the query.
func (q auctionsBidQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count auctions_bids rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q auctionsBidQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q auctionsBidQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if auctions_bids exists")
	}

	return count > 0, nil
}

// Auction pointed to by the foreign key.
func (o *AuctionsBid) Auction(mods ...qm.QueryMod) auctionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.AuctionID),
	}

	queryMods = append(queryMods, mods...)

	return Auctions(queryMods...)
}

// Player pointed to by the foreign key.
func (o *AuctionsBid) Player(mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PlayerID),
	}

	queryMods = append(queryMods, mods...)

	return Players(queryMods...)
}

// LoadAuction allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (auctionsBidL) LoadAuction(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAuctionsBid interface{}, mods queries.Applicator) error {
	var slice []*AuctionsBid
	var object *AuctionsBid

	if singular {
		var ok bool
		object, ok = maybeAuctionsBid.(*AuctionsBid)
		if !ok {
			object = new(AuctionsBid)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAuctionsBid)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAuctionsBid))
			}
		}
	} else {
		s, ok := maybeAuctionsBid.(*[]*AuctionsBid)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAuctionsBid)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAuctionsBid))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &auctionsBidR{}
		}
		args[object.AuctionID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &auctionsBidR{}
			}

			args[obj.AuctionID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`auctions`),
		qm.WhereIn(`auctions.id in ?`, argsSlice...),
		qmhelper.WhereIsNull(`auctions.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Auction")
	}

	var resultSlice []*Auction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Auction")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for auctions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for auctions")
	}

	if len(auctionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Auction = foreign
		if foreign.R == nil {
			foreign.R = &auctionR{}
		}
		foreign.R.AuctionsBids = append(foreign.R.AuctionsBids, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AuctionID == foreign.ID {
				local.R.Auction = foreign
				if foreign.R == nil {
					foreign.R = &auctionR{}
				}
				foreign.R.AuctionsBids = append(foreign.R.AuctionsBids, local)
				break
			}
		}
	}

	return nil
}

// LoadPlayer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (auctionsBidL) LoadPlayer(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAuctionsBid interface{}, mods queries.Applicator) error {
	var slice []*AuctionsBid
	var object *AuctionsBid

	if singular {
		var ok bool
		object, ok = maybeAuctionsBid.(*AuctionsBid)
		if !ok {
			object = new(AuctionsBid)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAuctionsBid)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAuctionsBid))
			}
		}
	} else {
		s, ok := maybeAuctionsBid.(*[]*AuctionsBid)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAuctionsBid)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAuctionsBid))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &auctionsBidR{}
		}
		args[object.PlayerID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &auctionsBidR{}
			}

			args[obj.PlayerID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`players`),
		qm.WhereIn(`players.id in ?`, argsSlice...),
		qmhelper.WhereIsNull(`players.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players")
	}

	if len(playerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Player = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.AuctionsBids = append(foreign.R.AuctionsBids, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PlayerID == foreign.ID {
				local.R.Player = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.AuctionsBids = append(foreign.R.AuctionsBids, local)
				break
			}
		}
	}

	return nil
}

// SetAuctionG of the auctionsBid to the related item.
// Sets o.R.Auction to related.
// Adds o to related.R.AuctionsBids.
// Uses the global database handle.
func (o *AuctionsBid) SetAuctionG(ctx context.Context, insert bool, related *Auction) error {
	return o.SetAuction(ctx, boil.GetContextDB(), insert, related)
}

// SetAuction of the auctionsBid to the related item.
// Sets o.R.Auction to related.
// Adds o to related.R.AuctionsBids.
func (o *AuctionsBid) SetAuction(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Auction) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"auctions_bids\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"auction_id"}),
		strmangle.WhereClause("\"", "\"", 2, auctionsBidPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AuctionID = related.ID
	if o.R == nil {
		o.R = &auctionsBidR{
			Auction: related,
		}
	} else {
		o.R.Auction = related
	}

	if related.R == nil {
		related.R = &auctionR{
			AuctionsBids: AuctionsBidSlice{o},
		}
	} else {
		related.R.AuctionsBids = append(related.R.AuctionsBids, o)
	}

	return nil
}

// SetPlayerG of the auctionsBid to the related item.
// Sets o.R.Player to related.
// Adds o to related.R.AuctionsBids.
// Uses the global database handle.
func (o *AuctionsBid) SetPlayerG(ctx context.Context, insert bool, related *Player) error {
	return o.SetPlayer(ctx, boil.GetContextDB(), insert, related)
}

// SetPlayer of the auctionsBid to the related item.
// Sets o.R.Player to related.
// Adds o to related.R.AuctionsBids.
func (o *AuctionsBid) SetPlayer(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"auctions_bids\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"player_id"}),
		strmangle.WhereClause("\"", "\"", 2, auctionsBidPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PlayerID = related.ID
	if o.R == nil {
		o.R = &auctionsBidR{
			Player: related,
		}
	} else {
		o.R.Player = related
	}

	if related.R == nil {
		related.R = &playerR{
			AuctionsBids: AuctionsBidSlice{o},
		}
	} else {
		related.R.AuctionsBids = append(related.R.AuctionsBids, o)
	}

	return nil
}

// AuctionsBids retrieves all the records using an executor.
func AuctionsBids(mods ...qm.QueryMod) auctionsBidQuery {
	mods = append(mods, qm.From("\"auctions_bids\""), qmhelper.WhereIsNull("\"auctions_bids\".\"deleted_at\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"auctions_bids\".*"})
	}

	return auctionsBidQuery{q}
}

// FindAuctionsBidG retrieves a single record by ID.
func FindAuctionsBidG(ctx context.Context, iD string, selectCols ...string) (*AuctionsBid, error) {
	return FindAuctionsBid(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindAuctionsBid retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAuctionsBid(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*AuctionsBid, error) {
	auctionsBidObj := &AuctionsBid{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"auctions_bids\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, auctionsBidObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from auctions_bids")
	}

	if err = auctionsBidObj.doAfterSelectHooks(ctx, exec); err != nil {
		return auctionsBidObj, err
	}

	return auctionsBidObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *AuctionsBid) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AuctionsBid) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no auctions_bids provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(auctionsBidColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	auctionsBidInsertCacheMut.RLock()
	cache, cached := auctionsBidInsertCache[key]
	auctionsBidInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			auctionsBidAllColumns,
			auctionsBidColumnsWithDefault,
			auctionsBidColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(auctionsBidType, auctionsBidMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(auctionsBidType, auctionsBidMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"auctions_bids\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"auctions_bids\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into auctions_bids")
	}

	if !cached {
		auctionsBidInsertCacheMut.Lock()
		auctionsBidInsertCache[key] = cache
		auctionsBidInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single AuctionsBid record using the global executor.
// See Update for more documentation.
func (o *AuctionsBid) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the AuctionsBid.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AuctionsBid) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	auctionsBidUpdateCacheMut.RLock()
	cache, cached := auctionsBidUpdateCache[key]
	auctionsBidUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			auctionsBidAllColumns,
			auctionsBidPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update auctions_bids, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"auctions_bids\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, auctionsBidPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(auctionsBidType, auctionsBidMapping, append(wl, auctionsBidPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update auctions_bids row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for auctions_bids")
	}

	if !cached {
		auctionsBidUpdateCacheMut.Lock()
		auctionsBidUpdateCache[key] = cache
		auctionsBidUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q auctionsBidQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q auctionsBidQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for auctions_bids")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for auctions_bids")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o AuctionsBidSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AuctionsBidSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), auctionsBidPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"auctions_bids\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, auctionsBidPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in auctionsBid slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all auctionsBid")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *AuctionsBid) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AuctionsBid) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no auctions_bids provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(auctionsBidColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	auctionsBidUpsertCacheMut.RLock()
	cache, cached := auctionsBidUpsertCache[key]
	auctionsBidUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			auctionsBidAllColumns,
			auctionsBidColumnsWithDefault,
			auctionsBidColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			auctionsBidAllColumns,
			auctionsBidPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert auctions_bids, could not build update column list")
		}

		ret := strmangle.SetComplement(auctionsBidAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(auctionsBidPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert auctions_bids, could not build conflict column list")
			}

			conflict = make([]string, len(auctionsBidPrimaryKeyColumns))
			copy(conflict, auctionsBidPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"auctions_bids\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(auctionsBidType, auctionsBidMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(auctionsBidType, auctionsBidMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert auctions_bids")
	}

	if !cached {
		auctionsBidUpsertCacheMut.Lock()
		auctionsBidUpsertCache[key] = cache
		auctionsBidUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single AuctionsBid record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *AuctionsBid) DeleteG(ctx context.Context, hardDelete bool) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB(), hardDelete)
}

// Delete deletes a single AuctionsBid record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AuctionsBid) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AuctionsBid provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), auctionsBidPrimaryKeyMapping)
		sql = "DELETE FROM \"auctions_bids\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"auctions_bids\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(auctionsBidType, auctionsBidMapping, append(wl, auctionsBidPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from auctions_bids")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for auctions_bids")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q auctionsBidQuery) DeleteAllG(ctx context.Context, hardDelete bool) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB(), hardDelete)
}

// DeleteAll deletes all matching rows.
func (q auctionsBidQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no auctionsBidQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from auctions_bids")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for auctions_bids")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o AuctionsBidSlice) DeleteAllG(ctx context.Context, hardDelete bool) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB(), hardDelete)
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AuctionsBidSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(auctionsBidBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), auctionsBidPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"auctions_bids\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, auctionsBidPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), auctionsBidPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"auctions_bids\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, auctionsBidPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from auctionsBid slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for auctions_bids")
	}

	if len(auctionsBidAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *AuctionsBid) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no AuctionsBid provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AuctionsBid) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAuctionsBid(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AuctionsBidSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty AuctionsBidSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AuctionsBidSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AuctionsBidSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), auctionsBidPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"auctions_bids\".* FROM \"auctions_bids\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, auctionsBidPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AuctionsBidSlice")
	}

	*o = slice

	return nil
}

// AuctionsBidExistsG checks if the AuctionsBid row exists.
func AuctionsBidExistsG(ctx context.Context, iD string) (bool, error) {
	return AuctionsBidExists(ctx, boil.GetContextDB(), iD)
}

// AuctionsBidExists checks if the AuctionsBid row exists.
func AuctionsBidExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"auctions_bids\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if auctions_bids exists")
	}

	return exists, nil
}

// Exists checks if the AuctionsBid row exists.
func (o *AuctionsBid) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return AuctionsBidExists(ctx, exec, o.ID)
}
