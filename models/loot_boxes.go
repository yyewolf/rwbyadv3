// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// LootBox is an object representing the database table.
type LootBox struct {
	ID        string        `boil:"id" json:"id" toml:"id" yaml:"id"`
	PlayerID  string        `boil:"player_id" json:"player_id" toml:"player_id" yaml:"player_id"`
	Type      LootBoxesType `boil:"type" json:"type" toml:"type" yaml:"type"`
	Metadata  null.JSON     `boil:"metadata" json:"metadata,omitempty" toml:"metadata" yaml:"metadata,omitempty"`
	CreatedAt time.Time     `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time     `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt null.Time     `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *lootBoxR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L lootBoxL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var LootBoxColumns = struct {
	ID        string
	PlayerID  string
	Type      string
	Metadata  string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
}{
	ID:        "id",
	PlayerID:  "player_id",
	Type:      "type",
	Metadata:  "metadata",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	DeletedAt: "deleted_at",
}

var LootBoxTableColumns = struct {
	ID        string
	PlayerID  string
	Type      string
	Metadata  string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
}{
	ID:        "loot_boxes.id",
	PlayerID:  "loot_boxes.player_id",
	Type:      "loot_boxes.type",
	Metadata:  "loot_boxes.metadata",
	CreatedAt: "loot_boxes.created_at",
	UpdatedAt: "loot_boxes.updated_at",
	DeletedAt: "loot_boxes.deleted_at",
}

// Generated where

type whereHelperLootBoxesType struct{ field string }

func (w whereHelperLootBoxesType) EQ(x LootBoxesType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperLootBoxesType) NEQ(x LootBoxesType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperLootBoxesType) LT(x LootBoxesType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperLootBoxesType) LTE(x LootBoxesType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperLootBoxesType) GT(x LootBoxesType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperLootBoxesType) GTE(x LootBoxesType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperLootBoxesType) IN(slice []LootBoxesType) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperLootBoxesType) NIN(slice []LootBoxesType) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_JSON struct{ field string }

func (w whereHelpernull_JSON) EQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_JSON) NEQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_JSON) LT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_JSON) LTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_JSON) GT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_JSON) GTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_JSON) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_JSON) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var LootBoxWhere = struct {
	ID        whereHelperstring
	PlayerID  whereHelperstring
	Type      whereHelperLootBoxesType
	Metadata  whereHelpernull_JSON
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
	DeletedAt whereHelpernull_Time
}{
	ID:        whereHelperstring{field: "\"loot_boxes\".\"id\""},
	PlayerID:  whereHelperstring{field: "\"loot_boxes\".\"player_id\""},
	Type:      whereHelperLootBoxesType{field: "\"loot_boxes\".\"type\""},
	Metadata:  whereHelpernull_JSON{field: "\"loot_boxes\".\"metadata\""},
	CreatedAt: whereHelpertime_Time{field: "\"loot_boxes\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"loot_boxes\".\"updated_at\""},
	DeletedAt: whereHelpernull_Time{field: "\"loot_boxes\".\"deleted_at\""},
}

// LootBoxRels is where relationship names are stored.
var LootBoxRels = struct {
	Player string
}{
	Player: "Player",
}

// lootBoxR is where relationships are stored.
type lootBoxR struct {
	Player *Player `boil:"Player" json:"Player" toml:"Player" yaml:"Player"`
}

// NewStruct creates a new relationship struct
func (*lootBoxR) NewStruct() *lootBoxR {
	return &lootBoxR{}
}

func (r *lootBoxR) GetPlayer() *Player {
	if r == nil {
		return nil
	}
	return r.Player
}

// lootBoxL is where Load methods for each relationship are stored.
type lootBoxL struct{}

var (
	lootBoxAllColumns            = []string{"id", "player_id", "type", "metadata", "created_at", "updated_at", "deleted_at"}
	lootBoxColumnsWithoutDefault = []string{"id", "player_id", "type"}
	lootBoxColumnsWithDefault    = []string{"metadata", "created_at", "updated_at", "deleted_at"}
	lootBoxPrimaryKeyColumns     = []string{"id"}
	lootBoxGeneratedColumns      = []string{}
)

type (
	// LootBoxSlice is an alias for a slice of pointers to LootBox.
	// This should almost always be used instead of []LootBox.
	LootBoxSlice []*LootBox
	// LootBoxHook is the signature for custom LootBox hook methods
	LootBoxHook func(context.Context, boil.ContextExecutor, *LootBox) error

	lootBoxQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	lootBoxType                 = reflect.TypeOf(&LootBox{})
	lootBoxMapping              = queries.MakeStructMapping(lootBoxType)
	lootBoxPrimaryKeyMapping, _ = queries.BindMapping(lootBoxType, lootBoxMapping, lootBoxPrimaryKeyColumns)
	lootBoxInsertCacheMut       sync.RWMutex
	lootBoxInsertCache          = make(map[string]insertCache)
	lootBoxUpdateCacheMut       sync.RWMutex
	lootBoxUpdateCache          = make(map[string]updateCache)
	lootBoxUpsertCacheMut       sync.RWMutex
	lootBoxUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var lootBoxAfterSelectMu sync.Mutex
var lootBoxAfterSelectHooks []LootBoxHook

var lootBoxBeforeInsertMu sync.Mutex
var lootBoxBeforeInsertHooks []LootBoxHook
var lootBoxAfterInsertMu sync.Mutex
var lootBoxAfterInsertHooks []LootBoxHook

var lootBoxBeforeUpdateMu sync.Mutex
var lootBoxBeforeUpdateHooks []LootBoxHook
var lootBoxAfterUpdateMu sync.Mutex
var lootBoxAfterUpdateHooks []LootBoxHook

var lootBoxBeforeDeleteMu sync.Mutex
var lootBoxBeforeDeleteHooks []LootBoxHook
var lootBoxAfterDeleteMu sync.Mutex
var lootBoxAfterDeleteHooks []LootBoxHook

var lootBoxBeforeUpsertMu sync.Mutex
var lootBoxBeforeUpsertHooks []LootBoxHook
var lootBoxAfterUpsertMu sync.Mutex
var lootBoxAfterUpsertHooks []LootBoxHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *LootBox) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lootBoxAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *LootBox) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lootBoxBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *LootBox) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lootBoxAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *LootBox) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lootBoxBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *LootBox) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lootBoxAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *LootBox) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lootBoxBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *LootBox) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lootBoxAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *LootBox) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lootBoxBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *LootBox) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lootBoxAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddLootBoxHook registers your hook function for all future operations.
func AddLootBoxHook(hookPoint boil.HookPoint, lootBoxHook LootBoxHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		lootBoxAfterSelectMu.Lock()
		lootBoxAfterSelectHooks = append(lootBoxAfterSelectHooks, lootBoxHook)
		lootBoxAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		lootBoxBeforeInsertMu.Lock()
		lootBoxBeforeInsertHooks = append(lootBoxBeforeInsertHooks, lootBoxHook)
		lootBoxBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		lootBoxAfterInsertMu.Lock()
		lootBoxAfterInsertHooks = append(lootBoxAfterInsertHooks, lootBoxHook)
		lootBoxAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		lootBoxBeforeUpdateMu.Lock()
		lootBoxBeforeUpdateHooks = append(lootBoxBeforeUpdateHooks, lootBoxHook)
		lootBoxBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		lootBoxAfterUpdateMu.Lock()
		lootBoxAfterUpdateHooks = append(lootBoxAfterUpdateHooks, lootBoxHook)
		lootBoxAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		lootBoxBeforeDeleteMu.Lock()
		lootBoxBeforeDeleteHooks = append(lootBoxBeforeDeleteHooks, lootBoxHook)
		lootBoxBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		lootBoxAfterDeleteMu.Lock()
		lootBoxAfterDeleteHooks = append(lootBoxAfterDeleteHooks, lootBoxHook)
		lootBoxAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		lootBoxBeforeUpsertMu.Lock()
		lootBoxBeforeUpsertHooks = append(lootBoxBeforeUpsertHooks, lootBoxHook)
		lootBoxBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		lootBoxAfterUpsertMu.Lock()
		lootBoxAfterUpsertHooks = append(lootBoxAfterUpsertHooks, lootBoxHook)
		lootBoxAfterUpsertMu.Unlock()
	}
}

// OneG returns a single lootBox record from the query using the global executor.
func (q lootBoxQuery) OneG(ctx context.Context) (*LootBox, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single lootBox record from the query.
func (q lootBoxQuery) One(ctx context.Context, exec boil.ContextExecutor) (*LootBox, error) {
	o := &LootBox{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for loot_boxes")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all LootBox records from the query using the global executor.
func (q lootBoxQuery) AllG(ctx context.Context) (LootBoxSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all LootBox records from the query.
func (q lootBoxQuery) All(ctx context.Context, exec boil.ContextExecutor) (LootBoxSlice, error) {
	var o []*LootBox

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to LootBox slice")
	}

	if len(lootBoxAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all LootBox records in the query using the global executor
func (q lootBoxQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all LootBox records in the query.
func (q lootBoxQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count loot_boxes rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q lootBoxQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q lootBoxQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if loot_boxes exists")
	}

	return count > 0, nil
}

// Player pointed to by the foreign key.
func (o *LootBox) Player(mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PlayerID),
	}

	queryMods = append(queryMods, mods...)

	return Players(queryMods...)
}

// LoadPlayer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (lootBoxL) LoadPlayer(ctx context.Context, e boil.ContextExecutor, singular bool, maybeLootBox interface{}, mods queries.Applicator) error {
	var slice []*LootBox
	var object *LootBox

	if singular {
		var ok bool
		object, ok = maybeLootBox.(*LootBox)
		if !ok {
			object = new(LootBox)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeLootBox)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeLootBox))
			}
		}
	} else {
		s, ok := maybeLootBox.(*[]*LootBox)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeLootBox)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeLootBox))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &lootBoxR{}
		}
		args[object.PlayerID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &lootBoxR{}
			}

			args[obj.PlayerID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`players`),
		qm.WhereIn(`players.id in ?`, argsSlice...),
		qmhelper.WhereIsNull(`players.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players")
	}

	if len(playerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Player = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.LootBoxes = append(foreign.R.LootBoxes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PlayerID == foreign.ID {
				local.R.Player = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.LootBoxes = append(foreign.R.LootBoxes, local)
				break
			}
		}
	}

	return nil
}

// SetPlayerG of the lootBox to the related item.
// Sets o.R.Player to related.
// Adds o to related.R.LootBoxes.
// Uses the global database handle.
func (o *LootBox) SetPlayerG(ctx context.Context, insert bool, related *Player) error {
	return o.SetPlayer(ctx, boil.GetContextDB(), insert, related)
}

// SetPlayer of the lootBox to the related item.
// Sets o.R.Player to related.
// Adds o to related.R.LootBoxes.
func (o *LootBox) SetPlayer(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"loot_boxes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"player_id"}),
		strmangle.WhereClause("\"", "\"", 2, lootBoxPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PlayerID = related.ID
	if o.R == nil {
		o.R = &lootBoxR{
			Player: related,
		}
	} else {
		o.R.Player = related
	}

	if related.R == nil {
		related.R = &playerR{
			LootBoxes: LootBoxSlice{o},
		}
	} else {
		related.R.LootBoxes = append(related.R.LootBoxes, o)
	}

	return nil
}

// LootBoxes retrieves all the records using an executor.
func LootBoxes(mods ...qm.QueryMod) lootBoxQuery {
	mods = append(mods, qm.From("\"loot_boxes\""), qmhelper.WhereIsNull("\"loot_boxes\".\"deleted_at\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"loot_boxes\".*"})
	}

	return lootBoxQuery{q}
}

// FindLootBoxG retrieves a single record by ID.
func FindLootBoxG(ctx context.Context, iD string, selectCols ...string) (*LootBox, error) {
	return FindLootBox(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindLootBox retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindLootBox(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*LootBox, error) {
	lootBoxObj := &LootBox{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"loot_boxes\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, lootBoxObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from loot_boxes")
	}

	if err = lootBoxObj.doAfterSelectHooks(ctx, exec); err != nil {
		return lootBoxObj, err
	}

	return lootBoxObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *LootBox) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *LootBox) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no loot_boxes provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(lootBoxColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	lootBoxInsertCacheMut.RLock()
	cache, cached := lootBoxInsertCache[key]
	lootBoxInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			lootBoxAllColumns,
			lootBoxColumnsWithDefault,
			lootBoxColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(lootBoxType, lootBoxMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(lootBoxType, lootBoxMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"loot_boxes\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"loot_boxes\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into loot_boxes")
	}

	if !cached {
		lootBoxInsertCacheMut.Lock()
		lootBoxInsertCache[key] = cache
		lootBoxInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single LootBox record using the global executor.
// See Update for more documentation.
func (o *LootBox) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the LootBox.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *LootBox) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	lootBoxUpdateCacheMut.RLock()
	cache, cached := lootBoxUpdateCache[key]
	lootBoxUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			lootBoxAllColumns,
			lootBoxPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update loot_boxes, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"loot_boxes\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, lootBoxPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(lootBoxType, lootBoxMapping, append(wl, lootBoxPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update loot_boxes row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for loot_boxes")
	}

	if !cached {
		lootBoxUpdateCacheMut.Lock()
		lootBoxUpdateCache[key] = cache
		lootBoxUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q lootBoxQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q lootBoxQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for loot_boxes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for loot_boxes")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o LootBoxSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o LootBoxSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), lootBoxPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"loot_boxes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, lootBoxPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in lootBox slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all lootBox")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *LootBox) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *LootBox) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no loot_boxes provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(lootBoxColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	lootBoxUpsertCacheMut.RLock()
	cache, cached := lootBoxUpsertCache[key]
	lootBoxUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			lootBoxAllColumns,
			lootBoxColumnsWithDefault,
			lootBoxColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			lootBoxAllColumns,
			lootBoxPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert loot_boxes, could not build update column list")
		}

		ret := strmangle.SetComplement(lootBoxAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(lootBoxPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert loot_boxes, could not build conflict column list")
			}

			conflict = make([]string, len(lootBoxPrimaryKeyColumns))
			copy(conflict, lootBoxPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"loot_boxes\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(lootBoxType, lootBoxMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(lootBoxType, lootBoxMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert loot_boxes")
	}

	if !cached {
		lootBoxUpsertCacheMut.Lock()
		lootBoxUpsertCache[key] = cache
		lootBoxUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single LootBox record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *LootBox) DeleteG(ctx context.Context, hardDelete bool) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB(), hardDelete)
}

// Delete deletes a single LootBox record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *LootBox) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no LootBox provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), lootBoxPrimaryKeyMapping)
		sql = "DELETE FROM \"loot_boxes\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"loot_boxes\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(lootBoxType, lootBoxMapping, append(wl, lootBoxPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from loot_boxes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for loot_boxes")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q lootBoxQuery) DeleteAllG(ctx context.Context, hardDelete bool) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB(), hardDelete)
}

// DeleteAll deletes all matching rows.
func (q lootBoxQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no lootBoxQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from loot_boxes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for loot_boxes")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o LootBoxSlice) DeleteAllG(ctx context.Context, hardDelete bool) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB(), hardDelete)
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o LootBoxSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(lootBoxBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), lootBoxPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"loot_boxes\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, lootBoxPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), lootBoxPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"loot_boxes\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, lootBoxPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from lootBox slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for loot_boxes")
	}

	if len(lootBoxAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *LootBox) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no LootBox provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *LootBox) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindLootBox(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *LootBoxSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty LootBoxSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *LootBoxSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := LootBoxSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), lootBoxPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"loot_boxes\".* FROM \"loot_boxes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, lootBoxPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in LootBoxSlice")
	}

	*o = slice

	return nil
}

// LootBoxExistsG checks if the LootBox row exists.
func LootBoxExistsG(ctx context.Context, iD string) (bool, error) {
	return LootBoxExists(ctx, boil.GetContextDB(), iD)
}

// LootBoxExists checks if the LootBox row exists.
func LootBoxExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"loot_boxes\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if loot_boxes exists")
	}

	return exists, nil
}

// Exists checks if the LootBox row exists.
func (o *LootBox) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return LootBoxExists(ctx, exec, o.ID)
}
