// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PlayerCard is an object representing the database table.
type PlayerCard struct {
	PlayerID string `boil:"player_id" json:"player_id" toml:"player_id" yaml:"player_id"`
	CardID   string `boil:"card_id" json:"card_id" toml:"card_id" yaml:"card_id"`
	Position int    `boil:"position" json:"position" toml:"position" yaml:"position"`

	R *playerCardR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L playerCardL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PlayerCardColumns = struct {
	PlayerID string
	CardID   string
	Position string
}{
	PlayerID: "player_id",
	CardID:   "card_id",
	Position: "position",
}

var PlayerCardTableColumns = struct {
	PlayerID string
	CardID   string
	Position string
}{
	PlayerID: "player_cards.player_id",
	CardID:   "player_cards.card_id",
	Position: "player_cards.position",
}

// Generated where

var PlayerCardWhere = struct {
	PlayerID whereHelperstring
	CardID   whereHelperstring
	Position whereHelperint
}{
	PlayerID: whereHelperstring{field: "\"player_cards\".\"player_id\""},
	CardID:   whereHelperstring{field: "\"player_cards\".\"card_id\""},
	Position: whereHelperint{field: "\"player_cards\".\"position\""},
}

// PlayerCardRels is where relationship names are stored.
var PlayerCardRels = struct {
	Card   string
	Player string
}{
	Card:   "Card",
	Player: "Player",
}

// playerCardR is where relationships are stored.
type playerCardR struct {
	Card   *Card   `boil:"Card" json:"Card" toml:"Card" yaml:"Card"`
	Player *Player `boil:"Player" json:"Player" toml:"Player" yaml:"Player"`
}

// NewStruct creates a new relationship struct
func (*playerCardR) NewStruct() *playerCardR {
	return &playerCardR{}
}

func (r *playerCardR) GetCard() *Card {
	if r == nil {
		return nil
	}
	return r.Card
}

func (r *playerCardR) GetPlayer() *Player {
	if r == nil {
		return nil
	}
	return r.Player
}

// playerCardL is where Load methods for each relationship are stored.
type playerCardL struct{}

var (
	playerCardAllColumns            = []string{"player_id", "card_id", "position"}
	playerCardColumnsWithoutDefault = []string{"player_id", "card_id", "position"}
	playerCardColumnsWithDefault    = []string{}
	playerCardPrimaryKeyColumns     = []string{"player_id", "card_id"}
	playerCardGeneratedColumns      = []string{}
)

type (
	// PlayerCardSlice is an alias for a slice of pointers to PlayerCard.
	// This should almost always be used instead of []PlayerCard.
	PlayerCardSlice []*PlayerCard
	// PlayerCardHook is the signature for custom PlayerCard hook methods
	PlayerCardHook func(context.Context, boil.ContextExecutor, *PlayerCard) error

	playerCardQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	playerCardType                 = reflect.TypeOf(&PlayerCard{})
	playerCardMapping              = queries.MakeStructMapping(playerCardType)
	playerCardPrimaryKeyMapping, _ = queries.BindMapping(playerCardType, playerCardMapping, playerCardPrimaryKeyColumns)
	playerCardInsertCacheMut       sync.RWMutex
	playerCardInsertCache          = make(map[string]insertCache)
	playerCardUpdateCacheMut       sync.RWMutex
	playerCardUpdateCache          = make(map[string]updateCache)
	playerCardUpsertCacheMut       sync.RWMutex
	playerCardUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var playerCardAfterSelectMu sync.Mutex
var playerCardAfterSelectHooks []PlayerCardHook

var playerCardBeforeInsertMu sync.Mutex
var playerCardBeforeInsertHooks []PlayerCardHook
var playerCardAfterInsertMu sync.Mutex
var playerCardAfterInsertHooks []PlayerCardHook

var playerCardBeforeUpdateMu sync.Mutex
var playerCardBeforeUpdateHooks []PlayerCardHook
var playerCardAfterUpdateMu sync.Mutex
var playerCardAfterUpdateHooks []PlayerCardHook

var playerCardBeforeDeleteMu sync.Mutex
var playerCardBeforeDeleteHooks []PlayerCardHook
var playerCardAfterDeleteMu sync.Mutex
var playerCardAfterDeleteHooks []PlayerCardHook

var playerCardBeforeUpsertMu sync.Mutex
var playerCardBeforeUpsertHooks []PlayerCardHook
var playerCardAfterUpsertMu sync.Mutex
var playerCardAfterUpsertHooks []PlayerCardHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PlayerCard) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range playerCardAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PlayerCard) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range playerCardBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PlayerCard) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range playerCardAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PlayerCard) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range playerCardBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PlayerCard) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range playerCardAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PlayerCard) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range playerCardBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PlayerCard) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range playerCardAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PlayerCard) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range playerCardBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PlayerCard) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range playerCardAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPlayerCardHook registers your hook function for all future operations.
func AddPlayerCardHook(hookPoint boil.HookPoint, playerCardHook PlayerCardHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		playerCardAfterSelectMu.Lock()
		playerCardAfterSelectHooks = append(playerCardAfterSelectHooks, playerCardHook)
		playerCardAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		playerCardBeforeInsertMu.Lock()
		playerCardBeforeInsertHooks = append(playerCardBeforeInsertHooks, playerCardHook)
		playerCardBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		playerCardAfterInsertMu.Lock()
		playerCardAfterInsertHooks = append(playerCardAfterInsertHooks, playerCardHook)
		playerCardAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		playerCardBeforeUpdateMu.Lock()
		playerCardBeforeUpdateHooks = append(playerCardBeforeUpdateHooks, playerCardHook)
		playerCardBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		playerCardAfterUpdateMu.Lock()
		playerCardAfterUpdateHooks = append(playerCardAfterUpdateHooks, playerCardHook)
		playerCardAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		playerCardBeforeDeleteMu.Lock()
		playerCardBeforeDeleteHooks = append(playerCardBeforeDeleteHooks, playerCardHook)
		playerCardBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		playerCardAfterDeleteMu.Lock()
		playerCardAfterDeleteHooks = append(playerCardAfterDeleteHooks, playerCardHook)
		playerCardAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		playerCardBeforeUpsertMu.Lock()
		playerCardBeforeUpsertHooks = append(playerCardBeforeUpsertHooks, playerCardHook)
		playerCardBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		playerCardAfterUpsertMu.Lock()
		playerCardAfterUpsertHooks = append(playerCardAfterUpsertHooks, playerCardHook)
		playerCardAfterUpsertMu.Unlock()
	}
}

// OneG returns a single playerCard record from the query using the global executor.
func (q playerCardQuery) OneG(ctx context.Context) (*PlayerCard, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single playerCard record from the query.
func (q playerCardQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PlayerCard, error) {
	o := &PlayerCard{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for player_cards")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all PlayerCard records from the query using the global executor.
func (q playerCardQuery) AllG(ctx context.Context) (PlayerCardSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all PlayerCard records from the query.
func (q playerCardQuery) All(ctx context.Context, exec boil.ContextExecutor) (PlayerCardSlice, error) {
	var o []*PlayerCard

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PlayerCard slice")
	}

	if len(playerCardAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all PlayerCard records in the query using the global executor
func (q playerCardQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all PlayerCard records in the query.
func (q playerCardQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count player_cards rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q playerCardQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q playerCardQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if player_cards exists")
	}

	return count > 0, nil
}

// Card pointed to by the foreign key.
func (o *PlayerCard) Card(mods ...qm.QueryMod) cardQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CardID),
	}

	queryMods = append(queryMods, mods...)

	return Cards(queryMods...)
}

// Player pointed to by the foreign key.
func (o *PlayerCard) Player(mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PlayerID),
	}

	queryMods = append(queryMods, mods...)

	return Players(queryMods...)
}

// LoadCard allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (playerCardL) LoadCard(ctx context.Context, e boil.ContextExecutor, singular bool, maybePlayerCard interface{}, mods queries.Applicator) error {
	var slice []*PlayerCard
	var object *PlayerCard

	if singular {
		var ok bool
		object, ok = maybePlayerCard.(*PlayerCard)
		if !ok {
			object = new(PlayerCard)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePlayerCard)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePlayerCard))
			}
		}
	} else {
		s, ok := maybePlayerCard.(*[]*PlayerCard)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePlayerCard)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePlayerCard))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &playerCardR{}
		}
		args[object.CardID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &playerCardR{}
			}

			args[obj.CardID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`cards`),
		qm.WhereIn(`cards.id in ?`, argsSlice...),
		qmhelper.WhereIsNull(`cards.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Card")
	}

	var resultSlice []*Card
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Card")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for cards")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for cards")
	}

	if len(cardAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Card = foreign
		if foreign.R == nil {
			foreign.R = &cardR{}
		}
		foreign.R.PlayerCards = append(foreign.R.PlayerCards, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CardID == foreign.ID {
				local.R.Card = foreign
				if foreign.R == nil {
					foreign.R = &cardR{}
				}
				foreign.R.PlayerCards = append(foreign.R.PlayerCards, local)
				break
			}
		}
	}

	return nil
}

// LoadPlayer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (playerCardL) LoadPlayer(ctx context.Context, e boil.ContextExecutor, singular bool, maybePlayerCard interface{}, mods queries.Applicator) error {
	var slice []*PlayerCard
	var object *PlayerCard

	if singular {
		var ok bool
		object, ok = maybePlayerCard.(*PlayerCard)
		if !ok {
			object = new(PlayerCard)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePlayerCard)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePlayerCard))
			}
		}
	} else {
		s, ok := maybePlayerCard.(*[]*PlayerCard)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePlayerCard)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePlayerCard))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &playerCardR{}
		}
		args[object.PlayerID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &playerCardR{}
			}

			args[obj.PlayerID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`players`),
		qm.WhereIn(`players.id in ?`, argsSlice...),
		qmhelper.WhereIsNull(`players.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players")
	}

	if len(playerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Player = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.PlayerCards = append(foreign.R.PlayerCards, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PlayerID == foreign.ID {
				local.R.Player = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.PlayerCards = append(foreign.R.PlayerCards, local)
				break
			}
		}
	}

	return nil
}

// SetCardG of the playerCard to the related item.
// Sets o.R.Card to related.
// Adds o to related.R.PlayerCards.
// Uses the global database handle.
func (o *PlayerCard) SetCardG(ctx context.Context, insert bool, related *Card) error {
	return o.SetCard(ctx, boil.GetContextDB(), insert, related)
}

// SetCard of the playerCard to the related item.
// Sets o.R.Card to related.
// Adds o to related.R.PlayerCards.
func (o *PlayerCard) SetCard(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Card) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"player_cards\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"card_id"}),
		strmangle.WhereClause("\"", "\"", 2, playerCardPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.PlayerID, o.CardID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CardID = related.ID
	if o.R == nil {
		o.R = &playerCardR{
			Card: related,
		}
	} else {
		o.R.Card = related
	}

	if related.R == nil {
		related.R = &cardR{
			PlayerCards: PlayerCardSlice{o},
		}
	} else {
		related.R.PlayerCards = append(related.R.PlayerCards, o)
	}

	return nil
}

// SetPlayerG of the playerCard to the related item.
// Sets o.R.Player to related.
// Adds o to related.R.PlayerCards.
// Uses the global database handle.
func (o *PlayerCard) SetPlayerG(ctx context.Context, insert bool, related *Player) error {
	return o.SetPlayer(ctx, boil.GetContextDB(), insert, related)
}

// SetPlayer of the playerCard to the related item.
// Sets o.R.Player to related.
// Adds o to related.R.PlayerCards.
func (o *PlayerCard) SetPlayer(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"player_cards\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"player_id"}),
		strmangle.WhereClause("\"", "\"", 2, playerCardPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.PlayerID, o.CardID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PlayerID = related.ID
	if o.R == nil {
		o.R = &playerCardR{
			Player: related,
		}
	} else {
		o.R.Player = related
	}

	if related.R == nil {
		related.R = &playerR{
			PlayerCards: PlayerCardSlice{o},
		}
	} else {
		related.R.PlayerCards = append(related.R.PlayerCards, o)
	}

	return nil
}

// PlayerCards retrieves all the records using an executor.
func PlayerCards(mods ...qm.QueryMod) playerCardQuery {
	mods = append(mods, qm.From("\"player_cards\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"player_cards\".*"})
	}

	return playerCardQuery{q}
}

// FindPlayerCardG retrieves a single record by ID.
func FindPlayerCardG(ctx context.Context, playerID string, cardID string, selectCols ...string) (*PlayerCard, error) {
	return FindPlayerCard(ctx, boil.GetContextDB(), playerID, cardID, selectCols...)
}

// FindPlayerCard retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPlayerCard(ctx context.Context, exec boil.ContextExecutor, playerID string, cardID string, selectCols ...string) (*PlayerCard, error) {
	playerCardObj := &PlayerCard{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"player_cards\" where \"player_id\"=$1 AND \"card_id\"=$2", sel,
	)

	q := queries.Raw(query, playerID, cardID)

	err := q.Bind(ctx, exec, playerCardObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from player_cards")
	}

	if err = playerCardObj.doAfterSelectHooks(ctx, exec); err != nil {
		return playerCardObj, err
	}

	return playerCardObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *PlayerCard) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PlayerCard) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no player_cards provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(playerCardColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	playerCardInsertCacheMut.RLock()
	cache, cached := playerCardInsertCache[key]
	playerCardInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			playerCardAllColumns,
			playerCardColumnsWithDefault,
			playerCardColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(playerCardType, playerCardMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(playerCardType, playerCardMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"player_cards\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"player_cards\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into player_cards")
	}

	if !cached {
		playerCardInsertCacheMut.Lock()
		playerCardInsertCache[key] = cache
		playerCardInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single PlayerCard record using the global executor.
// See Update for more documentation.
func (o *PlayerCard) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the PlayerCard.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PlayerCard) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	playerCardUpdateCacheMut.RLock()
	cache, cached := playerCardUpdateCache[key]
	playerCardUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			playerCardAllColumns,
			playerCardPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update player_cards, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"player_cards\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, playerCardPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(playerCardType, playerCardMapping, append(wl, playerCardPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update player_cards row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for player_cards")
	}

	if !cached {
		playerCardUpdateCacheMut.Lock()
		playerCardUpdateCache[key] = cache
		playerCardUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q playerCardQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q playerCardQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for player_cards")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for player_cards")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o PlayerCardSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PlayerCardSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), playerCardPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"player_cards\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, playerCardPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in playerCard slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all playerCard")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *PlayerCard) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PlayerCard) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no player_cards provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(playerCardColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	playerCardUpsertCacheMut.RLock()
	cache, cached := playerCardUpsertCache[key]
	playerCardUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			playerCardAllColumns,
			playerCardColumnsWithDefault,
			playerCardColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			playerCardAllColumns,
			playerCardPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert player_cards, could not build update column list")
		}

		ret := strmangle.SetComplement(playerCardAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(playerCardPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert player_cards, could not build conflict column list")
			}

			conflict = make([]string, len(playerCardPrimaryKeyColumns))
			copy(conflict, playerCardPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"player_cards\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(playerCardType, playerCardMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(playerCardType, playerCardMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert player_cards")
	}

	if !cached {
		playerCardUpsertCacheMut.Lock()
		playerCardUpsertCache[key] = cache
		playerCardUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single PlayerCard record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *PlayerCard) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single PlayerCard record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PlayerCard) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PlayerCard provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), playerCardPrimaryKeyMapping)
	sql := "DELETE FROM \"player_cards\" WHERE \"player_id\"=$1 AND \"card_id\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from player_cards")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for player_cards")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q playerCardQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q playerCardQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no playerCardQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from player_cards")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for player_cards")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o PlayerCardSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PlayerCardSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(playerCardBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), playerCardPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"player_cards\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, playerCardPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from playerCard slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for player_cards")
	}

	if len(playerCardAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *PlayerCard) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no PlayerCard provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PlayerCard) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPlayerCard(ctx, exec, o.PlayerID, o.CardID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PlayerCardSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty PlayerCardSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PlayerCardSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PlayerCardSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), playerCardPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"player_cards\".* FROM \"player_cards\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, playerCardPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PlayerCardSlice")
	}

	*o = slice

	return nil
}

// PlayerCardExistsG checks if the PlayerCard row exists.
func PlayerCardExistsG(ctx context.Context, playerID string, cardID string) (bool, error) {
	return PlayerCardExists(ctx, boil.GetContextDB(), playerID, cardID)
}

// PlayerCardExists checks if the PlayerCard row exists.
func PlayerCardExists(ctx context.Context, exec boil.ContextExecutor, playerID string, cardID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"player_cards\" where \"player_id\"=$1 AND \"card_id\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, playerID, cardID)
	}
	row := exec.QueryRowContext(ctx, sql, playerID, cardID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if player_cards exists")
	}

	return exists, nil
}

// Exists checks if the PlayerCard row exists.
func (o *PlayerCard) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PlayerCardExists(ctx, exec, o.PlayerID, o.CardID)
}
