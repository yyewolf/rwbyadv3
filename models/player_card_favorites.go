// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PlayerCardFavorite is an object representing the database table.
type PlayerCardFavorite struct {
	PlayerID string `boil:"player_id" json:"player_id" toml:"player_id" yaml:"player_id"`
	CardID   string `boil:"card_id" json:"card_id" toml:"card_id" yaml:"card_id"`
	Position int    `boil:"position" json:"position" toml:"position" yaml:"position"`

	R *playerCardFavoriteR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L playerCardFavoriteL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PlayerCardFavoriteColumns = struct {
	PlayerID string
	CardID   string
	Position string
}{
	PlayerID: "player_id",
	CardID:   "card_id",
	Position: "position",
}

var PlayerCardFavoriteTableColumns = struct {
	PlayerID string
	CardID   string
	Position string
}{
	PlayerID: "player_card_favorites.player_id",
	CardID:   "player_card_favorites.card_id",
	Position: "player_card_favorites.position",
}

// Generated where

var PlayerCardFavoriteWhere = struct {
	PlayerID whereHelperstring
	CardID   whereHelperstring
	Position whereHelperint
}{
	PlayerID: whereHelperstring{field: "\"player_card_favorites\".\"player_id\""},
	CardID:   whereHelperstring{field: "\"player_card_favorites\".\"card_id\""},
	Position: whereHelperint{field: "\"player_card_favorites\".\"position\""},
}

// PlayerCardFavoriteRels is where relationship names are stored.
var PlayerCardFavoriteRels = struct {
	Card   string
	Player string
}{
	Card:   "Card",
	Player: "Player",
}

// playerCardFavoriteR is where relationships are stored.
type playerCardFavoriteR struct {
	Card   *Card   `boil:"Card" json:"Card" toml:"Card" yaml:"Card"`
	Player *Player `boil:"Player" json:"Player" toml:"Player" yaml:"Player"`
}

// NewStruct creates a new relationship struct
func (*playerCardFavoriteR) NewStruct() *playerCardFavoriteR {
	return &playerCardFavoriteR{}
}

func (r *playerCardFavoriteR) GetCard() *Card {
	if r == nil {
		return nil
	}
	return r.Card
}

func (r *playerCardFavoriteR) GetPlayer() *Player {
	if r == nil {
		return nil
	}
	return r.Player
}

// playerCardFavoriteL is where Load methods for each relationship are stored.
type playerCardFavoriteL struct{}

var (
	playerCardFavoriteAllColumns            = []string{"player_id", "card_id", "position"}
	playerCardFavoriteColumnsWithoutDefault = []string{"player_id", "card_id", "position"}
	playerCardFavoriteColumnsWithDefault    = []string{}
	playerCardFavoritePrimaryKeyColumns     = []string{"player_id", "card_id"}
	playerCardFavoriteGeneratedColumns      = []string{}
)

type (
	// PlayerCardFavoriteSlice is an alias for a slice of pointers to PlayerCardFavorite.
	// This should almost always be used instead of []PlayerCardFavorite.
	PlayerCardFavoriteSlice []*PlayerCardFavorite
	// PlayerCardFavoriteHook is the signature for custom PlayerCardFavorite hook methods
	PlayerCardFavoriteHook func(context.Context, boil.ContextExecutor, *PlayerCardFavorite) error

	playerCardFavoriteQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	playerCardFavoriteType                 = reflect.TypeOf(&PlayerCardFavorite{})
	playerCardFavoriteMapping              = queries.MakeStructMapping(playerCardFavoriteType)
	playerCardFavoritePrimaryKeyMapping, _ = queries.BindMapping(playerCardFavoriteType, playerCardFavoriteMapping, playerCardFavoritePrimaryKeyColumns)
	playerCardFavoriteInsertCacheMut       sync.RWMutex
	playerCardFavoriteInsertCache          = make(map[string]insertCache)
	playerCardFavoriteUpdateCacheMut       sync.RWMutex
	playerCardFavoriteUpdateCache          = make(map[string]updateCache)
	playerCardFavoriteUpsertCacheMut       sync.RWMutex
	playerCardFavoriteUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var playerCardFavoriteAfterSelectMu sync.Mutex
var playerCardFavoriteAfterSelectHooks []PlayerCardFavoriteHook

var playerCardFavoriteBeforeInsertMu sync.Mutex
var playerCardFavoriteBeforeInsertHooks []PlayerCardFavoriteHook
var playerCardFavoriteAfterInsertMu sync.Mutex
var playerCardFavoriteAfterInsertHooks []PlayerCardFavoriteHook

var playerCardFavoriteBeforeUpdateMu sync.Mutex
var playerCardFavoriteBeforeUpdateHooks []PlayerCardFavoriteHook
var playerCardFavoriteAfterUpdateMu sync.Mutex
var playerCardFavoriteAfterUpdateHooks []PlayerCardFavoriteHook

var playerCardFavoriteBeforeDeleteMu sync.Mutex
var playerCardFavoriteBeforeDeleteHooks []PlayerCardFavoriteHook
var playerCardFavoriteAfterDeleteMu sync.Mutex
var playerCardFavoriteAfterDeleteHooks []PlayerCardFavoriteHook

var playerCardFavoriteBeforeUpsertMu sync.Mutex
var playerCardFavoriteBeforeUpsertHooks []PlayerCardFavoriteHook
var playerCardFavoriteAfterUpsertMu sync.Mutex
var playerCardFavoriteAfterUpsertHooks []PlayerCardFavoriteHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PlayerCardFavorite) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range playerCardFavoriteAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PlayerCardFavorite) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range playerCardFavoriteBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PlayerCardFavorite) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range playerCardFavoriteAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PlayerCardFavorite) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range playerCardFavoriteBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PlayerCardFavorite) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range playerCardFavoriteAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PlayerCardFavorite) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range playerCardFavoriteBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PlayerCardFavorite) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range playerCardFavoriteAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PlayerCardFavorite) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range playerCardFavoriteBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PlayerCardFavorite) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range playerCardFavoriteAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPlayerCardFavoriteHook registers your hook function for all future operations.
func AddPlayerCardFavoriteHook(hookPoint boil.HookPoint, playerCardFavoriteHook PlayerCardFavoriteHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		playerCardFavoriteAfterSelectMu.Lock()
		playerCardFavoriteAfterSelectHooks = append(playerCardFavoriteAfterSelectHooks, playerCardFavoriteHook)
		playerCardFavoriteAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		playerCardFavoriteBeforeInsertMu.Lock()
		playerCardFavoriteBeforeInsertHooks = append(playerCardFavoriteBeforeInsertHooks, playerCardFavoriteHook)
		playerCardFavoriteBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		playerCardFavoriteAfterInsertMu.Lock()
		playerCardFavoriteAfterInsertHooks = append(playerCardFavoriteAfterInsertHooks, playerCardFavoriteHook)
		playerCardFavoriteAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		playerCardFavoriteBeforeUpdateMu.Lock()
		playerCardFavoriteBeforeUpdateHooks = append(playerCardFavoriteBeforeUpdateHooks, playerCardFavoriteHook)
		playerCardFavoriteBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		playerCardFavoriteAfterUpdateMu.Lock()
		playerCardFavoriteAfterUpdateHooks = append(playerCardFavoriteAfterUpdateHooks, playerCardFavoriteHook)
		playerCardFavoriteAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		playerCardFavoriteBeforeDeleteMu.Lock()
		playerCardFavoriteBeforeDeleteHooks = append(playerCardFavoriteBeforeDeleteHooks, playerCardFavoriteHook)
		playerCardFavoriteBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		playerCardFavoriteAfterDeleteMu.Lock()
		playerCardFavoriteAfterDeleteHooks = append(playerCardFavoriteAfterDeleteHooks, playerCardFavoriteHook)
		playerCardFavoriteAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		playerCardFavoriteBeforeUpsertMu.Lock()
		playerCardFavoriteBeforeUpsertHooks = append(playerCardFavoriteBeforeUpsertHooks, playerCardFavoriteHook)
		playerCardFavoriteBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		playerCardFavoriteAfterUpsertMu.Lock()
		playerCardFavoriteAfterUpsertHooks = append(playerCardFavoriteAfterUpsertHooks, playerCardFavoriteHook)
		playerCardFavoriteAfterUpsertMu.Unlock()
	}
}

// OneG returns a single playerCardFavorite record from the query using the global executor.
func (q playerCardFavoriteQuery) OneG(ctx context.Context) (*PlayerCardFavorite, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single playerCardFavorite record from the query.
func (q playerCardFavoriteQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PlayerCardFavorite, error) {
	o := &PlayerCardFavorite{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for player_card_favorites")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all PlayerCardFavorite records from the query using the global executor.
func (q playerCardFavoriteQuery) AllG(ctx context.Context) (PlayerCardFavoriteSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all PlayerCardFavorite records from the query.
func (q playerCardFavoriteQuery) All(ctx context.Context, exec boil.ContextExecutor) (PlayerCardFavoriteSlice, error) {
	var o []*PlayerCardFavorite

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PlayerCardFavorite slice")
	}

	if len(playerCardFavoriteAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all PlayerCardFavorite records in the query using the global executor
func (q playerCardFavoriteQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all PlayerCardFavorite records in the query.
func (q playerCardFavoriteQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count player_card_favorites rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q playerCardFavoriteQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q playerCardFavoriteQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if player_card_favorites exists")
	}

	return count > 0, nil
}

// Card pointed to by the foreign key.
func (o *PlayerCardFavorite) Card(mods ...qm.QueryMod) cardQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CardID),
	}

	queryMods = append(queryMods, mods...)

	return Cards(queryMods...)
}

// Player pointed to by the foreign key.
func (o *PlayerCardFavorite) Player(mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PlayerID),
	}

	queryMods = append(queryMods, mods...)

	return Players(queryMods...)
}

// LoadCard allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (playerCardFavoriteL) LoadCard(ctx context.Context, e boil.ContextExecutor, singular bool, maybePlayerCardFavorite interface{}, mods queries.Applicator) error {
	var slice []*PlayerCardFavorite
	var object *PlayerCardFavorite

	if singular {
		var ok bool
		object, ok = maybePlayerCardFavorite.(*PlayerCardFavorite)
		if !ok {
			object = new(PlayerCardFavorite)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePlayerCardFavorite)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePlayerCardFavorite))
			}
		}
	} else {
		s, ok := maybePlayerCardFavorite.(*[]*PlayerCardFavorite)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePlayerCardFavorite)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePlayerCardFavorite))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &playerCardFavoriteR{}
		}
		args[object.CardID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &playerCardFavoriteR{}
			}

			args[obj.CardID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`cards`),
		qm.WhereIn(`cards.id in ?`, argsSlice...),
		qmhelper.WhereIsNull(`cards.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Card")
	}

	var resultSlice []*Card
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Card")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for cards")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for cards")
	}

	if len(cardAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Card = foreign
		if foreign.R == nil {
			foreign.R = &cardR{}
		}
		foreign.R.PlayerCardFavorites = append(foreign.R.PlayerCardFavorites, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CardID == foreign.ID {
				local.R.Card = foreign
				if foreign.R == nil {
					foreign.R = &cardR{}
				}
				foreign.R.PlayerCardFavorites = append(foreign.R.PlayerCardFavorites, local)
				break
			}
		}
	}

	return nil
}

// LoadPlayer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (playerCardFavoriteL) LoadPlayer(ctx context.Context, e boil.ContextExecutor, singular bool, maybePlayerCardFavorite interface{}, mods queries.Applicator) error {
	var slice []*PlayerCardFavorite
	var object *PlayerCardFavorite

	if singular {
		var ok bool
		object, ok = maybePlayerCardFavorite.(*PlayerCardFavorite)
		if !ok {
			object = new(PlayerCardFavorite)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePlayerCardFavorite)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePlayerCardFavorite))
			}
		}
	} else {
		s, ok := maybePlayerCardFavorite.(*[]*PlayerCardFavorite)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePlayerCardFavorite)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePlayerCardFavorite))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &playerCardFavoriteR{}
		}
		args[object.PlayerID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &playerCardFavoriteR{}
			}

			args[obj.PlayerID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`players`),
		qm.WhereIn(`players.id in ?`, argsSlice...),
		qmhelper.WhereIsNull(`players.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players")
	}

	if len(playerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Player = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.PlayerCardFavorites = append(foreign.R.PlayerCardFavorites, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PlayerID == foreign.ID {
				local.R.Player = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.PlayerCardFavorites = append(foreign.R.PlayerCardFavorites, local)
				break
			}
		}
	}

	return nil
}

// SetCardG of the playerCardFavorite to the related item.
// Sets o.R.Card to related.
// Adds o to related.R.PlayerCardFavorites.
// Uses the global database handle.
func (o *PlayerCardFavorite) SetCardG(ctx context.Context, insert bool, related *Card) error {
	return o.SetCard(ctx, boil.GetContextDB(), insert, related)
}

// SetCard of the playerCardFavorite to the related item.
// Sets o.R.Card to related.
// Adds o to related.R.PlayerCardFavorites.
func (o *PlayerCardFavorite) SetCard(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Card) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"player_card_favorites\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"card_id"}),
		strmangle.WhereClause("\"", "\"", 2, playerCardFavoritePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.PlayerID, o.CardID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CardID = related.ID
	if o.R == nil {
		o.R = &playerCardFavoriteR{
			Card: related,
		}
	} else {
		o.R.Card = related
	}

	if related.R == nil {
		related.R = &cardR{
			PlayerCardFavorites: PlayerCardFavoriteSlice{o},
		}
	} else {
		related.R.PlayerCardFavorites = append(related.R.PlayerCardFavorites, o)
	}

	return nil
}

// SetPlayerG of the playerCardFavorite to the related item.
// Sets o.R.Player to related.
// Adds o to related.R.PlayerCardFavorites.
// Uses the global database handle.
func (o *PlayerCardFavorite) SetPlayerG(ctx context.Context, insert bool, related *Player) error {
	return o.SetPlayer(ctx, boil.GetContextDB(), insert, related)
}

// SetPlayer of the playerCardFavorite to the related item.
// Sets o.R.Player to related.
// Adds o to related.R.PlayerCardFavorites.
func (o *PlayerCardFavorite) SetPlayer(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"player_card_favorites\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"player_id"}),
		strmangle.WhereClause("\"", "\"", 2, playerCardFavoritePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.PlayerID, o.CardID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PlayerID = related.ID
	if o.R == nil {
		o.R = &playerCardFavoriteR{
			Player: related,
		}
	} else {
		o.R.Player = related
	}

	if related.R == nil {
		related.R = &playerR{
			PlayerCardFavorites: PlayerCardFavoriteSlice{o},
		}
	} else {
		related.R.PlayerCardFavorites = append(related.R.PlayerCardFavorites, o)
	}

	return nil
}

// PlayerCardFavorites retrieves all the records using an executor.
func PlayerCardFavorites(mods ...qm.QueryMod) playerCardFavoriteQuery {
	mods = append(mods, qm.From("\"player_card_favorites\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"player_card_favorites\".*"})
	}

	return playerCardFavoriteQuery{q}
}

// FindPlayerCardFavoriteG retrieves a single record by ID.
func FindPlayerCardFavoriteG(ctx context.Context, playerID string, cardID string, selectCols ...string) (*PlayerCardFavorite, error) {
	return FindPlayerCardFavorite(ctx, boil.GetContextDB(), playerID, cardID, selectCols...)
}

// FindPlayerCardFavorite retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPlayerCardFavorite(ctx context.Context, exec boil.ContextExecutor, playerID string, cardID string, selectCols ...string) (*PlayerCardFavorite, error) {
	playerCardFavoriteObj := &PlayerCardFavorite{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"player_card_favorites\" where \"player_id\"=$1 AND \"card_id\"=$2", sel,
	)

	q := queries.Raw(query, playerID, cardID)

	err := q.Bind(ctx, exec, playerCardFavoriteObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from player_card_favorites")
	}

	if err = playerCardFavoriteObj.doAfterSelectHooks(ctx, exec); err != nil {
		return playerCardFavoriteObj, err
	}

	return playerCardFavoriteObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *PlayerCardFavorite) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PlayerCardFavorite) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no player_card_favorites provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(playerCardFavoriteColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	playerCardFavoriteInsertCacheMut.RLock()
	cache, cached := playerCardFavoriteInsertCache[key]
	playerCardFavoriteInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			playerCardFavoriteAllColumns,
			playerCardFavoriteColumnsWithDefault,
			playerCardFavoriteColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(playerCardFavoriteType, playerCardFavoriteMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(playerCardFavoriteType, playerCardFavoriteMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"player_card_favorites\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"player_card_favorites\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into player_card_favorites")
	}

	if !cached {
		playerCardFavoriteInsertCacheMut.Lock()
		playerCardFavoriteInsertCache[key] = cache
		playerCardFavoriteInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single PlayerCardFavorite record using the global executor.
// See Update for more documentation.
func (o *PlayerCardFavorite) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the PlayerCardFavorite.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PlayerCardFavorite) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	playerCardFavoriteUpdateCacheMut.RLock()
	cache, cached := playerCardFavoriteUpdateCache[key]
	playerCardFavoriteUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			playerCardFavoriteAllColumns,
			playerCardFavoritePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update player_card_favorites, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"player_card_favorites\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, playerCardFavoritePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(playerCardFavoriteType, playerCardFavoriteMapping, append(wl, playerCardFavoritePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update player_card_favorites row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for player_card_favorites")
	}

	if !cached {
		playerCardFavoriteUpdateCacheMut.Lock()
		playerCardFavoriteUpdateCache[key] = cache
		playerCardFavoriteUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q playerCardFavoriteQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q playerCardFavoriteQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for player_card_favorites")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for player_card_favorites")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o PlayerCardFavoriteSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PlayerCardFavoriteSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), playerCardFavoritePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"player_card_favorites\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, playerCardFavoritePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in playerCardFavorite slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all playerCardFavorite")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *PlayerCardFavorite) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PlayerCardFavorite) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no player_card_favorites provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(playerCardFavoriteColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	playerCardFavoriteUpsertCacheMut.RLock()
	cache, cached := playerCardFavoriteUpsertCache[key]
	playerCardFavoriteUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			playerCardFavoriteAllColumns,
			playerCardFavoriteColumnsWithDefault,
			playerCardFavoriteColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			playerCardFavoriteAllColumns,
			playerCardFavoritePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert player_card_favorites, could not build update column list")
		}

		ret := strmangle.SetComplement(playerCardFavoriteAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(playerCardFavoritePrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert player_card_favorites, could not build conflict column list")
			}

			conflict = make([]string, len(playerCardFavoritePrimaryKeyColumns))
			copy(conflict, playerCardFavoritePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"player_card_favorites\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(playerCardFavoriteType, playerCardFavoriteMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(playerCardFavoriteType, playerCardFavoriteMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert player_card_favorites")
	}

	if !cached {
		playerCardFavoriteUpsertCacheMut.Lock()
		playerCardFavoriteUpsertCache[key] = cache
		playerCardFavoriteUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single PlayerCardFavorite record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *PlayerCardFavorite) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single PlayerCardFavorite record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PlayerCardFavorite) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PlayerCardFavorite provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), playerCardFavoritePrimaryKeyMapping)
	sql := "DELETE FROM \"player_card_favorites\" WHERE \"player_id\"=$1 AND \"card_id\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from player_card_favorites")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for player_card_favorites")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q playerCardFavoriteQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q playerCardFavoriteQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no playerCardFavoriteQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from player_card_favorites")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for player_card_favorites")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o PlayerCardFavoriteSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PlayerCardFavoriteSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(playerCardFavoriteBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), playerCardFavoritePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"player_card_favorites\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, playerCardFavoritePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from playerCardFavorite slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for player_card_favorites")
	}

	if len(playerCardFavoriteAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *PlayerCardFavorite) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no PlayerCardFavorite provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PlayerCardFavorite) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPlayerCardFavorite(ctx, exec, o.PlayerID, o.CardID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PlayerCardFavoriteSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty PlayerCardFavoriteSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PlayerCardFavoriteSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PlayerCardFavoriteSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), playerCardFavoritePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"player_card_favorites\".* FROM \"player_card_favorites\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, playerCardFavoritePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PlayerCardFavoriteSlice")
	}

	*o = slice

	return nil
}

// PlayerCardFavoriteExistsG checks if the PlayerCardFavorite row exists.
func PlayerCardFavoriteExistsG(ctx context.Context, playerID string, cardID string) (bool, error) {
	return PlayerCardFavoriteExists(ctx, boil.GetContextDB(), playerID, cardID)
}

// PlayerCardFavoriteExists checks if the PlayerCardFavorite row exists.
func PlayerCardFavoriteExists(ctx context.Context, exec boil.ContextExecutor, playerID string, cardID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"player_card_favorites\" where \"player_id\"=$1 AND \"card_id\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, playerID, cardID)
	}
	row := exec.QueryRowContext(ctx, sql, playerID, cardID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if player_card_favorites exists")
	}

	return exists, nil
}

// Exists checks if the PlayerCardFavorite row exists.
func (o *PlayerCardFavorite) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PlayerCardFavoriteExists(ctx, exec, o.PlayerID, o.CardID)
}
